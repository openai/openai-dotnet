// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using System.Threading.Tasks;
using OpenAI;

namespace OpenAI.Batch
{
    [Experimental("OPENAI001")]
    public partial class BatchClient
    {
        private readonly Uri _endpoint;

        protected BatchClient()
        {
        }

        public ClientPipeline Pipeline { get; }

        public virtual ClientResult<InternalBatchJob> CreateBatch(string inputFileId, InternalCreateBatchRequestEndpoint endpoint, IDictionary<string, string> metadata = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inputFileId, nameof(inputFileId));

            InternalCreateBatchRequest spreadModel = new InternalCreateBatchRequest(default, endpoint, "24h", metadata, default);
            ClientResult result = this.CreateBatch(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((InternalBatchJob)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<InternalBatchJob>> CreateBatchAsync(string inputFileId, InternalCreateBatchRequestEndpoint endpoint, IDictionary<string, string> metadata = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inputFileId, nameof(inputFileId));

            InternalCreateBatchRequest spreadModel = new InternalCreateBatchRequest(default, endpoint, "24h", metadata, default);
            ClientResult result = await this.CreateBatchAsync(spreadModel, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((InternalBatchJob)result, result.GetRawResponse());
        }

        public virtual ClientResult GetBatch(string batchId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(batchId, nameof(batchId));

            using PipelineMessage message = CreateGetBatchRequest(batchId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetBatchAsync(string batchId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(batchId, nameof(batchId));

            using PipelineMessage message = CreateGetBatchRequest(batchId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }
    }
}
