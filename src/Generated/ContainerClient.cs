// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using System.Threading.Tasks;
using OpenAI;

namespace OpenAI.Containers
{
    [Experimental("OPENAI001")]
    public partial class ContainerClient
    {
        private readonly Uri _endpoint;

        protected ContainerClient()
        {
        }

        public ClientPipeline Pipeline { get; }

        public virtual CollectionResult GetContainers(int? limit, string order, string after, RequestOptions options)
        {
            return new ContainerClientGetContainersCollectionResult(this, limit, order, after, options);
        }

        public virtual AsyncCollectionResult GetContainersAsync(int? limit, string order, string after, RequestOptions options)
        {
            return new ContainerClientGetContainersAsyncCollectionResult(this, limit, order, after, options);
        }

        public virtual CollectionResult<ContainerResource> GetContainers(ContainerCollectionOptions options = default, CancellationToken cancellationToken = default)
        {
            return new ContainerClientGetContainersCollectionResultOfT(this, options?.PageSizeLimit, options?.Order?.ToString(), options?.AfterId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        public virtual AsyncCollectionResult<ContainerResource> GetContainersAsync(ContainerCollectionOptions options = default, CancellationToken cancellationToken = default)
        {
            return new ContainerClientGetContainersAsyncCollectionResultOfT(this, options?.PageSizeLimit, options?.Order?.ToString(), options?.AfterId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        public virtual ClientResult CreateContainer(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateContainerRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateContainerAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateContainerRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<ContainerResource> CreateContainer(CreateContainerBody body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = CreateContainer(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((ContainerResource)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<ContainerResource>> CreateContainerAsync(CreateContainerBody body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            ClientResult result = await CreateContainerAsync(body, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((ContainerResource)result, result.GetRawResponse());
        }

        public virtual ClientResult GetContainer(string containerId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            using PipelineMessage message = CreateGetContainerRequest(containerId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetContainerAsync(string containerId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            using PipelineMessage message = CreateGetContainerRequest(containerId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<ContainerResource> GetContainer(string containerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            ClientResult result = GetContainer(containerId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((ContainerResource)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<ContainerResource>> GetContainerAsync(string containerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            ClientResult result = await GetContainerAsync(containerId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((ContainerResource)result, result.GetRawResponse());
        }

        public virtual ClientResult DeleteContainer(string containerId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            using PipelineMessage message = CreateDeleteContainerRequest(containerId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> DeleteContainerAsync(string containerId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            using PipelineMessage message = CreateDeleteContainerRequest(containerId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<DeleteContainerResponse> DeleteContainer(string containerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            ClientResult result = DeleteContainer(containerId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((DeleteContainerResponse)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<DeleteContainerResponse>> DeleteContainerAsync(string containerId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            ClientResult result = await DeleteContainerAsync(containerId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((DeleteContainerResponse)result, result.GetRawResponse());
        }

        public virtual ClientResult CreateContainerFile(string containerId, BinaryContent content, string contentType, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateContainerFileRequest(containerId, content, contentType, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateContainerFileAsync(string containerId, BinaryContent content, string contentType, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateContainerFileRequest(containerId, content, contentType, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual CollectionResult GetContainerFiles(string containerId, int? limit, string order, string after, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            return new ContainerClientGetContainerFilesCollectionResult(
                this,
                containerId,
                limit,
                order,
                after,
                options);
        }

        public virtual AsyncCollectionResult GetContainerFilesAsync(string containerId, int? limit, string order, string after, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            return new ContainerClientGetContainerFilesAsyncCollectionResult(
                this,
                containerId,
                limit,
                order,
                after,
                options);
        }

        public virtual CollectionResult<ContainerFileResource> GetContainerFiles(string containerId, ContainerFileCollectionOptions options = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            return new ContainerClientGetContainerFilesCollectionResultOfT(
                this,
                containerId,
                options?.PageSizeLimit,
                options?.Order?.ToString(),
                options?.AfterId,
                cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        public virtual AsyncCollectionResult<ContainerFileResource> GetContainerFilesAsync(string containerId, ContainerFileCollectionOptions options = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));

            return new ContainerClientGetContainerFilesAsyncCollectionResultOfT(
                this,
                containerId,
                options?.PageSizeLimit,
                options?.Order?.ToString(),
                options?.AfterId,
                cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        public virtual ClientResult GetContainerFile(string containerId, string fileId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using PipelineMessage message = CreateGetContainerFileRequest(containerId, fileId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetContainerFileAsync(string containerId, string fileId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using PipelineMessage message = CreateGetContainerFileRequest(containerId, fileId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<ContainerFileResource> GetContainerFile(string containerId, string fileId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            ClientResult result = GetContainerFile(containerId, fileId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((ContainerFileResource)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<ContainerFileResource>> GetContainerFileAsync(string containerId, string fileId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            ClientResult result = await GetContainerFileAsync(containerId, fileId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((ContainerFileResource)result, result.GetRawResponse());
        }

        public virtual ClientResult DeleteContainerFile(string containerId, string fileId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using PipelineMessage message = CreateDeleteContainerFileRequest(containerId, fileId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> DeleteContainerFileAsync(string containerId, string fileId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using PipelineMessage message = CreateDeleteContainerFileRequest(containerId, fileId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<DeleteContainerFileResponse> DeleteContainerFile(string containerId, string fileId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            ClientResult result = DeleteContainerFile(containerId, fileId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue((DeleteContainerFileResponse)result, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<DeleteContainerFileResponse>> DeleteContainerFileAsync(string containerId, string fileId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            ClientResult result = await DeleteContainerFileAsync(containerId, fileId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue((DeleteContainerFileResponse)result, result.GetRawResponse());
        }

        public virtual ClientResult DownloadContainerFile(string containerId, string fileId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using PipelineMessage message = CreateDownloadContainerFileRequest(containerId, fileId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> DownloadContainerFileAsync(string containerId, string fileId, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using PipelineMessage message = CreateDownloadContainerFileRequest(containerId, fileId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult<BinaryData> DownloadContainerFile(string containerId, string fileId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            ClientResult result = DownloadContainerFile(containerId, fileId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
            return ClientResult.FromValue(result.GetRawResponse().Content, result.GetRawResponse());
        }

        public virtual async Task<ClientResult<BinaryData>> DownloadContainerFileAsync(string containerId, string fileId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(containerId, nameof(containerId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            ClientResult result = await DownloadContainerFileAsync(containerId, fileId, cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ClientResult.FromValue(result.GetRawResponse().Content, result.GetRawResponse());
        }
    }
}
