// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using OpenAI;

namespace OpenAI.Videos
{
    [Experimental("OPENAI001")]
    public partial class VideoClient
    {
        private readonly Uri _endpoint;

        protected VideoClient()
        {
        }

        public ClientPipeline Pipeline { get; }

        public virtual CollectionResult GetVideos(long? limit = default, string order = default, string after = default, RequestOptions options = null)
        {
            return new VideoClientGetVideosCollectionResult(this, limit, order, after, options);
        }

        public virtual AsyncCollectionResult GetVideosAsync(long? limit = default, string order = default, string after = default, RequestOptions options = null)
        {
            return new VideoClientGetVideosAsyncCollectionResult(this, limit, order, after, options);
        }

        public virtual ClientResult CreateVideo(BinaryContent content, string contentType, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateVideoRequest(content, contentType, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateVideoAsync(BinaryContent content, string contentType, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateVideoRequest(content, contentType, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult DeleteVideo(string videoId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(videoId, nameof(videoId));

            using PipelineMessage message = CreateDeleteVideoRequest(videoId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> DeleteVideoAsync(string videoId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(videoId, nameof(videoId));

            using PipelineMessage message = CreateDeleteVideoRequest(videoId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult GetVideo(string videoId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(videoId, nameof(videoId));

            using PipelineMessage message = CreateGetVideoRequest(videoId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetVideoAsync(string videoId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(videoId, nameof(videoId));

            using PipelineMessage message = CreateGetVideoRequest(videoId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult DownloadVideo(string videoId, string variant = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(videoId, nameof(videoId));

            using PipelineMessage message = CreateDownloadVideoRequest(videoId, variant, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> DownloadVideoAsync(string videoId, string variant = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(videoId, nameof(videoId));

            using PipelineMessage message = CreateDownloadVideoRequest(videoId, variant, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult CreateVideoRemix(string videoId, BinaryContent content, string contentType, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(videoId, nameof(videoId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateVideoRemixRequest(videoId, content, contentType, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateVideoRemixAsync(string videoId, BinaryContent content, string contentType, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(videoId, nameof(videoId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateVideoRemixRequest(videoId, content, contentType, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }
    }
}
