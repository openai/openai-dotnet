// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using OpenAI.Assistants;
using OpenAI.Audio;
using OpenAI.Chat;
using OpenAI.Containers;
using OpenAI.Embeddings;
using OpenAI.Files;
using OpenAI.FineTuning;
using OpenAI.Graders;
using OpenAI.Images;
using OpenAI.Models;
using OpenAI.Moderations;
using OpenAI.Realtime;
using OpenAI.Responses;
using OpenAI.VectorStores;

namespace OpenAI
{
    internal static partial class OpenAIModelFactory
    {
        public static Assistant Assistant(string id = default, string @object = default, DateTimeOffset createdAt = default, string name = default, string description = default, string model = default, string instructions = default, IEnumerable<ToolDefinition> tools = default, ToolResources toolResources = default, IReadOnlyDictionary<string, string> metadata = default, float? temperature = default, float? nucleusSamplingFactor = default, AssistantResponseFormat responseFormat = default)
        {
            tools ??= new ChangeTrackingList<ToolDefinition>();
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new Assistant(
                id,
                @object,
                createdAt,
                name,
                description,
                model,
                instructions,
                tools.ToList(),
                toolResources,
                metadata,
                temperature,
                nucleusSamplingFactor,
                responseFormat,
                additionalBinaryDataProperties: null);
        }

        public static FileSearchRankingOptions FileSearchRankingOptions(FileSearchRanker? ranker = default, float scoreThreshold = default)
        {
            return new FileSearchRankingOptions(ranker, scoreThreshold, additionalBinaryDataProperties: null);
        }

        public static ToolResources ToolResources(CodeInterpreterToolResources codeInterpreter = default, FileSearchToolResources fileSearch = default)
        {
            return new ToolResources(codeInterpreter, fileSearch, additionalBinaryDataProperties: null);
        }

        public static CodeInterpreterToolResources CodeInterpreterToolResources(IEnumerable<string> fileIds = default)
        {
            fileIds ??= new ChangeTrackingList<string>();

            return new CodeInterpreterToolResources(fileIds.ToList(), additionalBinaryDataProperties: null);
        }

        public static AssistantCreationOptions AssistantCreationOptions(string model = default, string name = default, string description = default, string instructions = default, ChatReasoningEffortLevel? reasoningEffortLevel = default, IEnumerable<ToolDefinition> tools = default, ToolResources toolResources = default, IDictionary<string, string> metadata = default, float? temperature = default, float? nucleusSamplingFactor = default, AssistantResponseFormat responseFormat = default)
        {
            tools ??= new ChangeTrackingList<ToolDefinition>();
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new AssistantCreationOptions(
                model,
                name,
                description,
                instructions,
                reasoningEffortLevel,
                tools.ToList(),
                toolResources,
                metadata,
                temperature,
                nucleusSamplingFactor,
                responseFormat,
                additionalBinaryDataProperties: null);
        }

        public static FileSearchToolResources FileSearchToolResources(IEnumerable<string> vectorStoreIds = default, IEnumerable<VectorStoreCreationHelper> newVectorStores = default)
        {
            vectorStoreIds ??= new ChangeTrackingList<string>();
            newVectorStores ??= new ChangeTrackingList<VectorStoreCreationHelper>();

            return new FileSearchToolResources(vectorStoreIds.ToList(), newVectorStores.ToList(), additionalBinaryDataProperties: null);
        }

        public static VectorStoreCreationHelper VectorStoreCreationHelper(IEnumerable<string> fileIds = default, FileChunkingStrategy chunkingStrategy = default, IDictionary<string, string> metadata = default)
        {
            fileIds ??= new ChangeTrackingList<string>();
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new VectorStoreCreationHelper(fileIds.ToList(), chunkingStrategy, metadata, additionalBinaryDataProperties: null);
        }

        public static AssistantModificationOptions AssistantModificationOptions(string model = default, ChatReasoningEffortLevel? reasoningEffortLevel = default, string name = default, string description = default, string instructions = default, IEnumerable<ToolDefinition> defaultTools = default, ToolResources toolResources = default, IDictionary<string, string> metadata = default, float? temperature = default, float? nucleusSamplingFactor = default, AssistantResponseFormat responseFormat = default)
        {
            defaultTools ??= new ChangeTrackingList<ToolDefinition>();
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new AssistantModificationOptions(
                model,
                reasoningEffortLevel,
                name,
                description,
                instructions,
                defaultTools.ToList(),
                toolResources,
                metadata,
                temperature,
                nucleusSamplingFactor,
                responseFormat,
                additionalBinaryDataProperties: null);
        }

        public static AssistantDeletionResult AssistantDeletionResult(string assistantId = default, bool deleted = default, string @object = default)
        {
            return new AssistantDeletionResult(assistantId, deleted, @object, additionalBinaryDataProperties: null);
        }

        public static TranscribedWord TranscribedWord(string word = default, TimeSpan startTime = default, TimeSpan endTime = default)
        {
            return new TranscribedWord(word, startTime, endTime, additionalBinaryDataProperties: null);
        }

        public static TranscribedSegment TranscribedSegment(int id = default, int seekOffset = default, TimeSpan startTime = default, TimeSpan endTime = default, string text = default, ReadOnlyMemory<int> tokenIds = default, float temperature = default, float averageLogProbability = default, float compressionRatio = default, float noSpeechProbability = default)
        {
            return new TranscribedSegment(
                id,
                seekOffset,
                startTime,
                endTime,
                text,
                tokenIds,
                temperature,
                averageLogProbability,
                compressionRatio,
                noSpeechProbability,
                additionalBinaryDataProperties: null);
        }

        public static StreamingAudioTranscriptionUpdate StreamingAudioTranscriptionUpdate(string kind = default)
        {
            return new InternalUnknownCreateTranscriptionResponseStreamEvent(new StreamingAudioTranscriptionUpdateKind(kind), additionalBinaryDataProperties: null);
        }

        public static StreamingAudioTranscriptionTextDeltaUpdate StreamingAudioTranscriptionTextDeltaUpdate(string delta = default, IEnumerable<AudioTokenLogProbabilityDetails> transcriptionTokenLogProbabilities = default)
        {
            transcriptionTokenLogProbabilities ??= new ChangeTrackingList<AudioTokenLogProbabilityDetails>();

            return new StreamingAudioTranscriptionTextDeltaUpdate(StreamingAudioTranscriptionUpdateKind.TranscriptTextDelta, additionalBinaryDataProperties: null, delta, transcriptionTokenLogProbabilities.ToList());
        }

        public static StreamingAudioTranscriptionTextDoneUpdate StreamingAudioTranscriptionTextDoneUpdate(string text = default, IEnumerable<AudioTokenLogProbabilityDetails> transcriptionTokenLogProbabilities = default)
        {
            transcriptionTokenLogProbabilities ??= new ChangeTrackingList<AudioTokenLogProbabilityDetails>();

            return new StreamingAudioTranscriptionTextDoneUpdate(StreamingAudioTranscriptionUpdateKind.TranscriptTextDone, additionalBinaryDataProperties: null, text, transcriptionTokenLogProbabilities.ToList());
        }

        public static AudioTranslation AudioTranslation(string task = default, string language = default, TimeSpan? duration = default, string text = default, IEnumerable<TranscribedSegment> segments = default)
        {
            segments ??= new ChangeTrackingList<TranscribedSegment>();

            return new AudioTranslation(
                task,
                language,
                duration,
                text,
                segments.ToList(),
                additionalBinaryDataProperties: null);
        }

        public static ChatOutputAudio ChatOutputAudio(string id = default, DateTimeOffset expiresAt = default, BinaryData audioBytes = default, string transcript = default)
        {
            return new ChatOutputAudio(id, expiresAt, audioBytes, transcript, additionalBinaryDataProperties: null);
        }

        public static ChatTokenLogProbabilityDetails ChatTokenLogProbabilityDetails(string token = default, float logProbability = default, ReadOnlyMemory<byte>? utf8Bytes = default, IEnumerable<ChatTokenTopLogProbabilityDetails> topLogProbabilities = default)
        {
            topLogProbabilities ??= new ChangeTrackingList<ChatTokenTopLogProbabilityDetails>();

            return new ChatTokenLogProbabilityDetails(token, logProbability, utf8Bytes, topLogProbabilities.ToList(), additionalBinaryDataProperties: null);
        }

        public static ChatTokenTopLogProbabilityDetails ChatTokenTopLogProbabilityDetails(string token = default, float logProbability = default, ReadOnlyMemory<byte>? utf8Bytes = default)
        {
            return new ChatTokenTopLogProbabilityDetails(token, logProbability, utf8Bytes, additionalBinaryDataProperties: null);
        }

        public static ChatTokenUsage ChatTokenUsage(int outputTokenCount = default, int inputTokenCount = default, int totalTokenCount = default, ChatOutputTokenUsageDetails outputTokenDetails = default, ChatInputTokenUsageDetails inputTokenDetails = default)
        {
            return new ChatTokenUsage(
                outputTokenCount,
                inputTokenCount,
                totalTokenCount,
                outputTokenDetails,
                inputTokenDetails,
                additionalBinaryDataProperties: null);
        }

        public static ChatOutputTokenUsageDetails ChatOutputTokenUsageDetails(int acceptedPredictionTokenCount = default, int audioTokenCount = default, int reasoningTokenCount = default, int rejectedPredictionTokenCount = default)
        {
            return new ChatOutputTokenUsageDetails(acceptedPredictionTokenCount, audioTokenCount, reasoningTokenCount, rejectedPredictionTokenCount, additionalBinaryDataProperties: null);
        }

        public static ChatInputTokenUsageDetails ChatInputTokenUsageDetails(int audioTokenCount = default, int cachedTokenCount = default)
        {
            return new ChatInputTokenUsageDetails(audioTokenCount, cachedTokenCount, additionalBinaryDataProperties: null);
        }

        public static ChatMessage ChatMessage(string role = default, ChatMessageContent content = default)
        {
            return new InternalUnknownChatMessage(role.ToChatMessageRole(), content, additionalBinaryDataProperties: null);
        }

        public static ChatMessageContentPart ChatMessageContentPart()
        {
            return new InternalUnknownChatCompletionRequestMessageContentPart(additionalBinaryDataProperties: null);
        }

        public static SystemChatMessage SystemChatMessage(ChatMessageContent content = default, string participantName = default)
        {
            return new SystemChatMessage(default, content, additionalBinaryDataProperties: null, participantName);
        }

        public static DeveloperChatMessage DeveloperChatMessage(ChatMessageContent content = default, string participantName = default)
        {
            return new DeveloperChatMessage(default, content, additionalBinaryDataProperties: null, participantName);
        }

        public static UserChatMessage UserChatMessage(ChatMessageContent content = default, string participantName = default)
        {
            return new UserChatMessage(default, content, additionalBinaryDataProperties: null, participantName);
        }

        public static AssistantChatMessage AssistantChatMessage(ChatMessageContent content = default, string refusal = default, string participantName = default, ChatOutputAudioReference outputAudioReference = default, IEnumerable<ChatToolCall> toolCalls = default, ChatFunctionCall functionCall = default)
        {
            toolCalls ??= new ChangeTrackingList<ChatToolCall>();

            return new AssistantChatMessage(
                default,
                content,
                additionalBinaryDataProperties: null,
                refusal,
                participantName,
                outputAudioReference,
                toolCalls.ToList(),
                functionCall);
        }

        public static ChatOutputAudioReference ChatOutputAudioReference(string id = default)
        {
            return new ChatOutputAudioReference(id, additionalBinaryDataProperties: null);
        }

        public static ChatFunctionCall ChatFunctionCall(string functionName = default, BinaryData functionArguments = default)
        {
            return new ChatFunctionCall(functionName, functionArguments, additionalBinaryDataProperties: null);
        }

        public static ToolChatMessage ToolChatMessage(ChatMessageContent content = default, string toolCallId = default)
        {
            return new ToolChatMessage(default, content, additionalBinaryDataProperties: null, toolCallId);
        }

        public static FunctionChatMessage FunctionChatMessage(ChatMessageContent content = default, string functionName = default)
        {
            return new FunctionChatMessage(default, content, additionalBinaryDataProperties: null, functionName);
        }

        public static ChatAudioOptions ChatAudioOptions(ChatOutputAudioVoice outputAudioVoice = default, ChatOutputAudioFormat outputAudioFormat = default)
        {
            return new ChatAudioOptions(outputAudioVoice, outputAudioFormat, additionalBinaryDataProperties: null);
        }

        public static ChatFunction ChatFunction(string functionDescription = default, string functionName = default, BinaryData functionParameters = default)
        {
            return new ChatFunction(functionDescription, functionName, functionParameters, additionalBinaryDataProperties: null);
        }

        public static StreamingChatOutputAudioUpdate StreamingChatOutputAudioUpdate(string id = default, string transcriptUpdate = default, BinaryData audioBytesUpdate = default, DateTimeOffset? expiresAt = default)
        {
            return new StreamingChatOutputAudioUpdate(id, transcriptUpdate, audioBytesUpdate, expiresAt, additionalBinaryDataProperties: null);
        }

        public static StreamingChatFunctionCallUpdate StreamingChatFunctionCallUpdate(string functionName = default, BinaryData functionArgumentsUpdate = default)
        {
            return new StreamingChatFunctionCallUpdate(functionName, functionArgumentsUpdate, additionalBinaryDataProperties: null);
        }

        public static ChatCompletionDeletionResult ChatCompletionDeletionResult(string @object = default, string chatCompletionId = default, bool deleted = default)
        {
            return new ChatCompletionDeletionResult(@object, chatCompletionId, deleted, additionalBinaryDataProperties: null);
        }

        public static ContainerResource ContainerResource(string id = default, string @object = default, string name = default, DateTimeOffset createdAt = default, string status = default, ContainerResourceExpiresAfter expiresAfter = default)
        {
            return new ContainerResource(
                id,
                @object,
                name,
                createdAt,
                status,
                expiresAfter,
                additionalBinaryDataProperties: null);
        }

        public static ContainerResourceExpiresAfter ContainerResourceExpiresAfter(string anchor = default, int? minutes = default)
        {
            return new ContainerResourceExpiresAfter(anchor, minutes, additionalBinaryDataProperties: null);
        }

        public static CreateContainerBody CreateContainerBody(string name = default, IEnumerable<string> fileIds = default, CreateContainerBodyExpiresAfter expiresAfter = default)
        {
            fileIds ??= new ChangeTrackingList<string>();

            return new CreateContainerBody(name, fileIds.ToList(), expiresAfter, additionalBinaryDataProperties: null);
        }

        public static CreateContainerBodyExpiresAfter CreateContainerBodyExpiresAfter(string anchor = default, int minutes = default)
        {
            return new CreateContainerBodyExpiresAfter(anchor, minutes, additionalBinaryDataProperties: null);
        }

        public static DeleteContainerResponse DeleteContainerResponse(string id = default, string @object = default, bool deleted = default)
        {
            return new DeleteContainerResponse(id, @object, deleted, additionalBinaryDataProperties: null);
        }

        public static CreateContainerFileBody CreateContainerFileBody(string fileId = default, BinaryData @file = default)
        {
            return new CreateContainerFileBody(fileId, @file, additionalBinaryDataProperties: null);
        }

        public static ContainerFileResource ContainerFileResource(string id = default, string @object = default, string containerId = default, DateTimeOffset createdAt = default, int bytes = default, string path = default, string source = default)
        {
            return new ContainerFileResource(
                id,
                @object,
                containerId,
                createdAt,
                bytes,
                path,
                source,
                additionalBinaryDataProperties: null);
        }

        public static DeleteContainerFileResponse DeleteContainerFileResponse(string id = default, string @object = default, bool deleted = default)
        {
            return new DeleteContainerFileResponse(id, @object, deleted, additionalBinaryDataProperties: null);
        }

        public static OpenAIEmbeddingCollection OpenAIEmbeddingCollection(IEnumerable<OpenAIEmbedding> data = default, string model = default, string @object = default, EmbeddingTokenUsage usage = default)
        {
            data ??= new ChangeTrackingList<OpenAIEmbedding>();

            return new OpenAIEmbeddingCollection(data.ToList(), model, @object, usage, serializedAdditionalRawData: null);
        }

        public static OpenAIEmbedding OpenAIEmbedding(int index = default, BinaryData embeddingProperty = default, string @object = default)
        {
            return new OpenAIEmbedding(index, embeddingProperty, @object, serializedAdditionalRawData: null);
        }

        public static EmbeddingTokenUsage EmbeddingTokenUsage(int inputTokenCount = default, int totalTokenCount = default)
        {
            return new EmbeddingTokenUsage(inputTokenCount, totalTokenCount, additionalBinaryDataProperties: null);
        }

        public static OpenAIFileCollection OpenAIFileCollection(IEnumerable<OpenAIFile> data = default, string @object = default, string firstId = default, string lastId = default, bool hasMore = default)
        {
            data ??= new ChangeTrackingList<OpenAIFile>();

            return new OpenAIFileCollection(
                data.ToList(),
                @object,
                firstId,
                lastId,
                hasMore,
                serializedAdditionalRawData: null);
        }

        public static OpenAIFile OpenAIFile(string id = default, long? sizeInBytesLong = default, DateTimeOffset createdAt = default, DateTimeOffset? expiresAt = default, string filename = default, string @object = default, FilePurpose purpose = default, FileStatus status = default, string statusDetails = default)
        {
            return new OpenAIFile(
                id,
                sizeInBytesLong,
                createdAt,
                expiresAt,
                filename,
                @object,
                purpose,
                status,
                statusDetails,
                additionalBinaryDataProperties: null);
        }

        public static FileDeletionResult FileDeletionResult(string fileId = default, string @object = default, bool deleted = default)
        {
            return new FileDeletionResult(fileId, @object, deleted, additionalBinaryDataProperties: null);
        }

        public static HyperparametersForSupervised HyperparametersForSupervised(BinaryData batchSize = default, BinaryData learningRateMultiplier = default, BinaryData nEpochs = default)
        {
            return new HyperparametersForSupervised(batchSize, learningRateMultiplier, nEpochs, additionalBinaryDataProperties: null);
        }

        public static HyperparametersForDPO HyperparametersForDPO(BinaryData beta = default, BinaryData batchSize = default, BinaryData learningRateMultiplier = default, BinaryData nEpochs = default)
        {
            return new HyperparametersForDPO(beta, batchSize, learningRateMultiplier, nEpochs, additionalBinaryDataProperties: null);
        }

        public static GraderStringCheck GraderStringCheck(string name = default, string input = default, string reference = default, GraderStringCheckOperation operation = default)
        {
            return new GraderStringCheck(
                GraderType.StringCheck,
                additionalBinaryDataProperties: null,
                name,
                input,
                reference,
                operation);
        }

        public static Grader Grader(string kind = default)
        {
            return new UnknownGrader(new GraderType(kind), additionalBinaryDataProperties: null);
        }

        public static GraderTextSimilarity GraderTextSimilarity(string name = default, string input = default, string reference = default, GraderTextSimilarityEvaluationMetric evaluationMetric = default)
        {
            return new GraderTextSimilarity(
                GraderType.TextSimilarity,
                additionalBinaryDataProperties: null,
                name,
                input,
                reference,
                evaluationMetric);
        }

        public static GraderPython GraderPython(string name = default, string source = default, string imageTag = default)
        {
            return new GraderPython(GraderType.Python, additionalBinaryDataProperties: null, name, source, imageTag);
        }

        public static GraderMulti GraderMulti(string name = default, BinaryData graders = default, string calculateOutput = default)
        {
            return new GraderMulti(GraderType.Multi, additionalBinaryDataProperties: null, name, graders, calculateOutput);
        }

        public static FineTuningError FineTuningError(string code = default, string message = default, string invalidParameter = default)
        {
            return new FineTuningError(code, message, invalidParameter, additionalBinaryDataProperties: null);
        }

        public static FineTuningHyperparameters FineTuningHyperparameters(BinaryData batchSize = default, BinaryData learningRateMultiplier = default, BinaryData epochCount = default)
        {
            return new FineTuningHyperparameters(batchSize, learningRateMultiplier, epochCount, additionalBinaryDataProperties: null);
        }

        public static FineTuningCheckpoint FineTuningCheckpoint(string id = default, DateTimeOffset createdAt = default, string modelId = default, int stepNumber = default, FineTuningCheckpointMetrics metrics = default, string jobId = default, string @object = default)
        {
            return new FineTuningCheckpoint(
                id,
                createdAt,
                modelId,
                stepNumber,
                metrics,
                jobId,
                @object,
                additionalBinaryDataProperties: null);
        }

        public static FineTuningCheckpointMetrics FineTuningCheckpointMetrics(int stepNumber = default, float? trainLoss = default, float? trainMeanTokenAccuracy = default, float? validLoss = default, float? validMeanTokenAccuracy = default, float? fullValidLoss = default, float? fullValidMeanTokenAccuracy = default)
        {
            return new FineTuningCheckpointMetrics(
                stepNumber,
                trainLoss,
                trainMeanTokenAccuracy,
                validLoss,
                validMeanTokenAccuracy,
                fullValidLoss,
                fullValidMeanTokenAccuracy,
                additionalBinaryDataProperties: null);
        }

        public static FineTuningEvent FineTuningEvent(string id = default, DateTimeOffset createdAt = default, string message = default, FineTuningJobEventKind? kind = default, BinaryData data = default, string level = default, string @object = default)
        {
            return new FineTuningEvent(
                id,
                createdAt,
                message,
                kind,
                data,
                level,
                @object,
                additionalBinaryDataProperties: null);
        }

        public static RunGraderRequest RunGraderRequest(BinaryData grader = default, BinaryData item = default, string modelSample = default)
        {
            return new RunGraderRequest(grader, item, modelSample, additionalBinaryDataProperties: null);
        }

        public static RunGraderResponse RunGraderResponse(float reward = default, RunGraderResponseMetadata metadata = default, BinaryData subRewards = default, BinaryData modelGraderTokenUsagePerModel = default)
        {
            return new RunGraderResponse(reward, metadata, subRewards, modelGraderTokenUsagePerModel, additionalBinaryDataProperties: null);
        }

        public static RunGraderResponseMetadata RunGraderResponseMetadata(string name = default, string kind = default, RunGraderResponseMetadataErrors errors = default, float executionTime = default, BinaryData scores = default, int? tokenUsage = default, string sampledModelName = default)
        {
            return new RunGraderResponseMetadata(
                name,
                kind,
                errors,
                executionTime,
                scores,
                tokenUsage,
                sampledModelName,
                additionalBinaryDataProperties: null);
        }

        public static RunGraderResponseMetadataErrors RunGraderResponseMetadataErrors(bool formulaParseError = default, bool sampleParseError = default, bool truncatedObservationError = default, bool unresponsiveRewardError = default, bool invalidVariableError = default, bool otherError = default, bool pythonGraderServerError = default, string pythonGraderServerErrorType = default, bool pythonGraderRuntimeError = default, string pythonGraderRuntimeErrorDetails = default, bool modelGraderServerError = default, bool modelGraderRefusalError = default, bool modelGraderParseError = default, string modelGraderServerErrorDetails = default)
        {
            return new RunGraderResponseMetadataErrors(
                formulaParseError,
                sampleParseError,
                truncatedObservationError,
                unresponsiveRewardError,
                invalidVariableError,
                otherError,
                pythonGraderServerError,
                pythonGraderServerErrorType,
                pythonGraderRuntimeError,
                pythonGraderRuntimeErrorDetails,
                modelGraderServerError,
                modelGraderRefusalError,
                modelGraderParseError,
                modelGraderServerErrorDetails,
                additionalBinaryDataProperties: null);
        }

        public static ValidateGraderRequest ValidateGraderRequest(BinaryData grader = default)
        {
            return new ValidateGraderRequest(grader, additionalBinaryDataProperties: null);
        }

        public static ValidateGraderResponse ValidateGraderResponse(BinaryData grader = default)
        {
            return new ValidateGraderResponse(grader, additionalBinaryDataProperties: null);
        }

        public static FileSearchToolRankingOptions FileSearchToolRankingOptions(FileSearchToolRanker? ranker = default, float? scoreThreshold = default)
        {
            return new FileSearchToolRankingOptions(ranker, scoreThreshold, additionalBinaryDataProperties: null);
        }

        public static ImageGenerationToolInputImageMask ImageGenerationToolInputImageMask(string imageUrl = default, string fileId = default)
        {
            return new ImageGenerationToolInputImageMask(imageUrl, fileId, additionalBinaryDataProperties: null);
        }

        public static McpToolFilter McpToolFilter(IEnumerable<string> toolNames = default, bool? isReadOnly = default)
        {
            toolNames ??= new ChangeTrackingList<string>();

            return new McpToolFilter(toolNames.ToList(), isReadOnly, additionalBinaryDataProperties: null);
        }

        public static ResponseTextOptions ResponseTextOptions(ResponseTextFormat textFormat = default)
        {
            return new ResponseTextOptions(textFormat, additionalBinaryDataProperties: null);
        }

        public static ResponseMessageAnnotation ResponseMessageAnnotation(string kind = default)
        {
            return new InternalUnknownAnnotation(kind.ToResponseMessageAnnotationKind(), additionalBinaryDataProperties: null);
        }

        public static FileCitationMessageAnnotation FileCitationMessageAnnotation(string fileId = default, int index = default)
        {
            return new FileCitationMessageAnnotation(ResponseMessageAnnotationKind.FileCitation, additionalBinaryDataProperties: null, fileId, index);
        }

        public static UriCitationMessageAnnotation UriCitationMessageAnnotation(Uri uri = default, int startIndex = default, int endIndex = default, string title = default)
        {
            return new UriCitationMessageAnnotation(
                ResponseMessageAnnotationKind.UriCitation,
                additionalBinaryDataProperties: null,
                uri,
                startIndex,
                endIndex,
                title);
        }

        public static FilePathMessageAnnotation FilePathMessageAnnotation(string fileId = default, int index = default)
        {
            return new FilePathMessageAnnotation(ResponseMessageAnnotationKind.FilePath, additionalBinaryDataProperties: null, fileId, index);
        }

        public static FileSearchCallResult FileSearchCallResult(string fileId = default, string text = default, string filename = default, IDictionary<string, BinaryData> attributes = default, float? score = default)
        {
            attributes ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new FileSearchCallResult(
                fileId,
                text,
                filename,
                attributes,
                score,
                additionalBinaryDataProperties: null);
        }

        public static ComputerCallAction ComputerCallAction(string kind = default)
        {
            return new InternalUnknownComputerAction(kind.ToComputerCallActionKind(), additionalBinaryDataProperties: null);
        }

        public static ComputerCallSafetyCheck ComputerCallSafetyCheck(string id = default, string code = default, string message = default)
        {
            return new ComputerCallSafetyCheck(id, code, message, additionalBinaryDataProperties: null);
        }

        public static McpToolDefinition McpToolDefinition(string name = default, string description = default, BinaryData inputSchema = default, BinaryData annotations = default)
        {
            return new McpToolDefinition(name, description, inputSchema, annotations, additionalBinaryDataProperties: null);
        }

        public static OpenAIResponse OpenAIResponse(IDictionary<string, string> metadata = default, float? temperature = default, float? topP = default, string endUserId = default, ResponseServiceTier? serviceTier = default, string previousResponseId = default, string model = default, ResponseReasoningOptions reasoningOptions = default, bool? backgroundModeEnabled = default, int? maxOutputTokenCount = default, string instructions = default, ResponseTextOptions textOptions = default, IEnumerable<ResponseTool> tools = default, ResponseToolChoice toolChoice = default, ResponseTruncationMode? truncationMode = default, string id = default, string @object = default, ResponseStatus? status = default, DateTimeOffset createdAt = default, ResponseError error = default, ResponseIncompleteStatusDetails incompleteStatusDetails = default, IEnumerable<ResponseItem> outputItems = default, ResponseTokenUsage usage = default, bool parallelToolCallsEnabled = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();
            tools ??= new ChangeTrackingList<ResponseTool>();
            outputItems ??= new ChangeTrackingList<ResponseItem>();

            return new OpenAIResponse(
                metadata,
                temperature,
                topP,
                endUserId,
                serviceTier,
                previousResponseId,
                model,
                reasoningOptions,
                backgroundModeEnabled,
                maxOutputTokenCount,
                instructions,
                textOptions,
                tools.ToList(),
                toolChoice,
                truncationMode,
                id,
                @object,
                status,
                createdAt,
                error,
                incompleteStatusDetails,
                outputItems.ToList(),
                usage,
                parallelToolCallsEnabled,
                additionalBinaryDataProperties: null);
        }

        public static ResponseError ResponseError(ResponseErrorCode code = default, string message = default)
        {
            return new ResponseError(code, message, additionalBinaryDataProperties: null);
        }

        public static ResponseIncompleteStatusDetails ResponseIncompleteStatusDetails(ResponseIncompleteStatusReason? reason = default)
        {
            return new ResponseIncompleteStatusDetails(reason, additionalBinaryDataProperties: null);
        }

        public static ResponseTokenUsage ResponseTokenUsage(int inputTokenCount = default, ResponseInputTokenUsageDetails inputTokenDetails = default, int outputTokenCount = default, ResponseOutputTokenUsageDetails outputTokenDetails = default, int totalTokenCount = default)
        {
            return new ResponseTokenUsage(
                inputTokenCount,
                inputTokenDetails,
                outputTokenCount,
                outputTokenDetails,
                totalTokenCount,
                additionalBinaryDataProperties: null);
        }

        public static ResponseInputTokenUsageDetails ResponseInputTokenUsageDetails(int cachedTokenCount = default)
        {
            return new ResponseInputTokenUsageDetails(cachedTokenCount, additionalBinaryDataProperties: null);
        }

        public static ResponseOutputTokenUsageDetails ResponseOutputTokenUsageDetails(int reasoningTokenCount = default)
        {
            return new ResponseOutputTokenUsageDetails(reasoningTokenCount, additionalBinaryDataProperties: null);
        }

        public static ResponseDeletionResult ResponseDeletionResult(string id = default, string @object = default, bool deleted = default)
        {
            return new ResponseDeletionResult(id, @object, deleted, additionalBinaryDataProperties: null);
        }

        public static ImageGenerationOptions ImageGenerationOptions(string prompt = default, InternalCreateImageRequestModel? model = default, long? n = default, GeneratedImageQuality? quality = default, GeneratedImageFormat? responseFormat = default, GeneratedImageFileFormat? outputFileFormat = default, int? outputCompressionFactor = default, GeneratedImageSize? size = default, GeneratedImageModerationLevel? moderationLevel = default, GeneratedImageBackground? background = default, GeneratedImageStyle? style = default, string endUserId = default)
        {
            return new ImageGenerationOptions(
                prompt,
                model,
                n,
                quality,
                responseFormat,
                outputFileFormat,
                outputCompressionFactor,
                size,
                moderationLevel,
                background,
                style,
                endUserId,
                additionalBinaryDataProperties: null);
        }

        public static GeneratedImageCollection GeneratedImageCollection(DateTimeOffset createdAt = default, IEnumerable<GeneratedImage> data = default, ImageTokenUsage usage = default)
        {
            data ??= new ChangeTrackingList<GeneratedImage>();

            return new GeneratedImageCollection(createdAt, data.ToList(), usage, additionalBinaryDataProperties: null);
        }

        public static GeneratedImage GeneratedImage(BinaryData imageBytes = default, Uri imageUri = default, string revisedPrompt = default)
        {
            return new GeneratedImage(imageBytes, imageUri, revisedPrompt, additionalBinaryDataProperties: null);
        }

        public static ImageTokenUsage ImageTokenUsage(int totalTokenCount = default, int inputTokenCount = default, int outputTokenCount = default, ImageInputTokenUsageDetails inputTokenDetails = default)
        {
            return new ImageTokenUsage(totalTokenCount, inputTokenCount, outputTokenCount, inputTokenDetails, additionalBinaryDataProperties: null);
        }

        public static ImageInputTokenUsageDetails ImageInputTokenUsageDetails(int textTokenCount = default, int imageTokenCount = default)
        {
            return new ImageInputTokenUsageDetails(textTokenCount, imageTokenCount, additionalBinaryDataProperties: null);
        }

        public static ImageEditOptions ImageEditOptions(BinaryData image = default, string prompt = default, BinaryData mask = default, GeneratedImageBackground? background = default, InternalCreateImageEditRequestModel? model = default, long? n = default, GeneratedImageSize? size = default, GeneratedImageFormat? responseFormat = default, string endUserId = default, GeneratedImageQuality? quality = default)
        {
            return new ImageEditOptions(
                image,
                prompt,
                mask,
                background,
                model,
                n,
                size,
                responseFormat,
                endUserId,
                quality,
                additionalBinaryDataProperties: null);
        }

        public static ImageVariationOptions ImageVariationOptions(BinaryData image = default, InternalCreateImageVariationRequestModel? model = default, long? n = default, GeneratedImageFormat? responseFormat = default, GeneratedImageSize? size = default, string endUserId = default)
        {
            return new ImageVariationOptions(
                image,
                model,
                n,
                responseFormat,
                size,
                endUserId,
                additionalBinaryDataProperties: null);
        }

        public static MessageCreationOptions MessageCreationOptions(Assistants.MessageRole role = default, IEnumerable<MessageContent> content = default, IEnumerable<MessageCreationAttachment> attachments = default, IDictionary<string, string> metadata = default)
        {
            content ??= new ChangeTrackingList<MessageContent>();
            attachments ??= new ChangeTrackingList<MessageCreationAttachment>();
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new MessageCreationOptions(role, content.ToList(), attachments.ToList(), metadata, additionalBinaryDataProperties: null);
        }

        public static MessageCreationAttachment MessageCreationAttachment(string fileId = default, IEnumerable<ToolDefinition> tools = default)
        {
            tools ??= new ChangeTrackingList<ToolDefinition>();

            return new MessageCreationAttachment(fileId, tools.ToList(), additionalBinaryDataProperties: null);
        }

        public static ThreadMessage ThreadMessage(string id = default, string @object = default, DateTimeOffset createdAt = default, string threadId = default, Assistants.MessageStatus status = default, MessageFailureDetails incompleteDetails = default, DateTimeOffset? completedAt = default, DateTimeOffset? incompleteAt = default, Assistants.MessageRole role = default, IEnumerable<MessageContent> content = default, string assistantId = default, string runId = default, IEnumerable<MessageCreationAttachment> attachments = default, IReadOnlyDictionary<string, string> metadata = default)
        {
            content ??= new ChangeTrackingList<MessageContent>();
            attachments ??= new ChangeTrackingList<MessageCreationAttachment>();
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new ThreadMessage(
                id,
                @object,
                createdAt,
                threadId,
                status,
                incompleteDetails,
                completedAt,
                incompleteAt,
                role,
                content.ToList(),
                assistantId,
                runId,
                attachments.ToList(),
                metadata,
                additionalBinaryDataProperties: null);
        }

        public static MessageFailureDetails MessageFailureDetails(MessageFailureReason reason = default)
        {
            return new MessageFailureDetails(reason, additionalBinaryDataProperties: null);
        }

        public static MessageModificationOptions MessageModificationOptions(IDictionary<string, string> metadata = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new MessageModificationOptions(metadata, additionalBinaryDataProperties: null);
        }

        public static MessageDeletionResult MessageDeletionResult(string messageId = default, bool deleted = default, string @object = default)
        {
            return new MessageDeletionResult(messageId, deleted, @object, additionalBinaryDataProperties: null);
        }

        public static ModerationResultCollection ModerationResultCollection(string id = default, string model = default, IEnumerable<ModerationResult> results = default)
        {
            results ??= new ChangeTrackingList<ModerationResult>();

            return new ModerationResultCollection(id, model, results.ToList());
        }

        public static ModerationResult ModerationResult(bool flagged = default)
        {
            return new ModerationResult(flagged, additionalBinaryDataProperties: null);
        }

        public static ThreadCreationOptions ThreadCreationOptions(IEnumerable<MessageCreationOptions> internalMessages = default, ToolResources toolResources = default, IDictionary<string, string> metadata = default)
        {
            internalMessages ??= new ChangeTrackingList<MessageCreationOptions>();
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new ThreadCreationOptions(internalMessages.ToList(), toolResources, metadata, additionalBinaryDataProperties: null);
        }

        public static RunError RunError(RunErrorCode code = default, string message = default)
        {
            return new RunError(code, message, additionalBinaryDataProperties: null);
        }

        public static RunIncompleteDetails RunIncompleteDetails(RunIncompleteReason? reason = default)
        {
            return new RunIncompleteDetails(reason, additionalBinaryDataProperties: null);
        }

        public static RunTokenUsage RunTokenUsage(int outputTokenCount = default, int inputTokenCount = default, int totalTokenCount = default)
        {
            return new RunTokenUsage(outputTokenCount, inputTokenCount, totalTokenCount, additionalBinaryDataProperties: null);
        }

        public static RunCreationOptions RunCreationOptions(string assistantId = default, string modelOverride = default, ChatReasoningEffortLevel? reasoningEffortLevel = default, string instructionsOverride = default, string additionalInstructions = default, IEnumerable<MessageCreationOptions> internalMessages = default, IEnumerable<ToolDefinition> toolsOverride = default, IDictionary<string, string> metadata = default, float? temperature = default, float? nucleusSamplingFactor = default, bool? stream = default, int? maxInputTokenCount = default, int? maxOutputTokenCount = default, RunTruncationStrategy truncationStrategy = default, ToolConstraint toolConstraint = default, bool? allowParallelToolCalls = default, AssistantResponseFormat responseFormat = default)
        {
            internalMessages ??= new ChangeTrackingList<MessageCreationOptions>();
            toolsOverride ??= new ChangeTrackingList<ToolDefinition>();
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new RunCreationOptions(
                assistantId,
                modelOverride,
                reasoningEffortLevel,
                instructionsOverride,
                additionalInstructions,
                internalMessages.ToList(),
                toolsOverride.ToList(),
                metadata,
                temperature,
                nucleusSamplingFactor,
                stream,
                maxInputTokenCount,
                maxOutputTokenCount,
                truncationStrategy,
                toolConstraint,
                allowParallelToolCalls,
                responseFormat,
                additionalBinaryDataProperties: null);
        }

        public static RunModificationOptions RunModificationOptions(IDictionary<string, string> metadata = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new RunModificationOptions(metadata, additionalBinaryDataProperties: null);
        }

        public static ToolOutput ToolOutput(string toolCallId = default, string output = default)
        {
            return new ToolOutput(toolCallId, output, additionalBinaryDataProperties: null);
        }

        public static RunStep RunStep(string id = default, string @object = default, DateTimeOffset createdAt = default, string assistantId = default, string threadId = default, string runId = default, RunStepKind kind = default, RunStepStatus status = default, RunStepDetails details = default, RunStepError lastError = default, DateTimeOffset? expiredAt = default, DateTimeOffset? cancelledAt = default, DateTimeOffset? failedAt = default, DateTimeOffset? completedAt = default, IReadOnlyDictionary<string, string> metadata = default, RunStepTokenUsage usage = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new RunStep(
                id,
                @object,
                createdAt,
                assistantId,
                threadId,
                runId,
                kind,
                status,
                details,
                lastError,
                expiredAt,
                cancelledAt,
                failedAt,
                completedAt,
                metadata,
                usage,
                additionalBinaryDataProperties: null);
        }

        public static RunStepToolCall RunStepToolCall(string kind = default, string id = default)
        {
            return new UnknownRunStepDetailsToolCallsObjectToolCallsObject(kind.ToRunStepToolCallKind(), id, additionalBinaryDataProperties: null);
        }

        public static RunStepFileSearchResult RunStepFileSearchResult(string fileId = default, string fileName = default, float score = default, IEnumerable<RunStepFileSearchResultContent> content = default)
        {
            content ??= new ChangeTrackingList<RunStepFileSearchResultContent>();

            return new RunStepFileSearchResult(fileId, fileName, score, content.ToList(), additionalBinaryDataProperties: null);
        }

        public static RunStepFileSearchResultContent RunStepFileSearchResultContent(RunStepFileSearchResultContentKind kind = default, string text = default)
        {
            return new RunStepFileSearchResultContent(kind, text, additionalBinaryDataProperties: null);
        }

        public static RunStepError RunStepError(RunStepErrorCode code = default, string message = default)
        {
            return new RunStepError(code, message, additionalBinaryDataProperties: null);
        }

        public static RunStepTokenUsage RunStepTokenUsage(int outputTokenCount = default, int inputTokenCount = default, int totalTokenCount = default)
        {
            return new RunStepTokenUsage(outputTokenCount, inputTokenCount, totalTokenCount, additionalBinaryDataProperties: null);
        }

        public static AssistantThread AssistantThread(string id = default, string @object = default, DateTimeOffset createdAt = default, ToolResources toolResources = default, IReadOnlyDictionary<string, string> metadata = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new AssistantThread(
                id,
                @object,
                createdAt,
                toolResources,
                metadata,
                additionalBinaryDataProperties: null);
        }

        public static ThreadModificationOptions ThreadModificationOptions(ToolResources toolResources = default, IDictionary<string, string> metadata = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new ThreadModificationOptions(toolResources, metadata, additionalBinaryDataProperties: null);
        }

        public static ThreadDeletionResult ThreadDeletionResult(string threadId = default, bool deleted = default, string @object = default)
        {
            return new ThreadDeletionResult(threadId, deleted, @object, additionalBinaryDataProperties: null);
        }

        public static VectorStore VectorStore(string id = default, string @object = default, DateTimeOffset createdAt = default, string name = default, int usageBytes = default, VectorStoreFileCounts fileCounts = default, VectorStoreStatus status = default, VectorStoreExpirationPolicy expirationPolicy = default, DateTimeOffset? expiresAt = default, DateTimeOffset? lastActiveAt = default, IReadOnlyDictionary<string, string> metadata = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new VectorStore(
                id,
                @object,
                createdAt,
                name,
                usageBytes,
                fileCounts,
                status,
                expirationPolicy,
                expiresAt,
                lastActiveAt,
                metadata,
                additionalBinaryDataProperties: null);
        }

        public static VectorStoreFileCounts VectorStoreFileCounts(int inProgress = default, int completed = default, int failed = default, int cancelled = default, int total = default)
        {
            return new VectorStoreFileCounts(
                inProgress,
                completed,
                failed,
                cancelled,
                total,
                additionalBinaryDataProperties: null);
        }

        public static VectorStoreExpirationPolicy VectorStoreExpirationPolicy(VectorStoreExpirationAnchor anchor = default, int days = default)
        {
            return new VectorStoreExpirationPolicy(anchor, days, additionalBinaryDataProperties: null);
        }

        public static VectorStoreCreationOptions VectorStoreCreationOptions(IEnumerable<string> fileIds = default, string name = default, VectorStoreExpirationPolicy expirationPolicy = default, FileChunkingStrategy chunkingStrategy = default, IDictionary<string, string> metadata = default)
        {
            fileIds ??= new ChangeTrackingList<string>();
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new VectorStoreCreationOptions(
                fileIds.ToList(),
                name,
                expirationPolicy,
                chunkingStrategy,
                metadata,
                additionalBinaryDataProperties: null);
        }

        public static VectorStoreModificationOptions VectorStoreModificationOptions(string name = default, VectorStoreExpirationPolicy expirationPolicy = default, IDictionary<string, string> metadata = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new VectorStoreModificationOptions(name, expirationPolicy, metadata, additionalBinaryDataProperties: null);
        }

        public static VectorStoreDeletionResult VectorStoreDeletionResult(string vectorStoreId = default, bool deleted = default, string @object = default)
        {
            return new VectorStoreDeletionResult(vectorStoreId, deleted, @object, additionalBinaryDataProperties: null);
        }

        public static VectorStoreFileBatch VectorStoreFileBatch(string batchId = default, DateTimeOffset createdAt = default, string vectorStoreId = default, VectorStoreFileBatchStatus status = default, VectorStoreFileCounts fileCounts = default, object @object = default)
        {
            return new VectorStoreFileBatch(
                batchId,
                createdAt,
                vectorStoreId,
                status,
                fileCounts,
                @object,
                additionalBinaryDataProperties: null);
        }

        public static VectorStoreFile VectorStoreFile(string fileId = default, string @object = default, int size = default, DateTimeOffset createdAt = default, string vectorStoreId = default, VectorStoreFileStatus status = default, VectorStoreFileError lastError = default, FileChunkingStrategy chunkingStrategy = default, IDictionary<string, BinaryData> attributes = default)
        {
            attributes ??= new ChangeTrackingDictionary<string, BinaryData>();

            return new VectorStoreFile(
                fileId,
                @object,
                size,
                createdAt,
                vectorStoreId,
                status,
                lastError,
                chunkingStrategy,
                attributes,
                additionalBinaryDataProperties: null);
        }

        public static VectorStoreFileError VectorStoreFileError(VectorStoreFileErrorCode code = default, string message = default)
        {
            return new VectorStoreFileError(code, message, additionalBinaryDataProperties: null);
        }

        public static FileFromStoreRemovalResult FileFromStoreRemovalResult(string fileId = default, bool removed = default, string @object = default)
        {
            return new FileFromStoreRemovalResult(fileId, removed, @object, additionalBinaryDataProperties: null);
        }

        public static OpenAIModelCollection OpenAIModelCollection(string @object = default, IEnumerable<OpenAIModel> data = default)
        {
            data ??= new ChangeTrackingList<OpenAIModel>();

            return new OpenAIModelCollection(@object, data.ToList(), serializedAdditionalRawData: null);
        }

        public static OpenAIModel OpenAIModel(string id = default, DateTimeOffset createdAt = default, string @object = default, string ownedBy = default)
        {
            return new OpenAIModel(id, createdAt, @object, ownedBy, additionalBinaryDataProperties: null);
        }

        public static ModelDeletionResult ModelDeletionResult(string modelId = default, bool deleted = default, string @object = default)
        {
            return new ModelDeletionResult(modelId, deleted, @object, additionalBinaryDataProperties: null);
        }

        public static InputTranscriptionOptions InputTranscriptionOptions(InputTranscriptionModel? model = default, string language = default, string prompt = default)
        {
            return new InputTranscriptionOptions(model, language, prompt, additionalBinaryDataProperties: null);
        }

        public static TurnDetectionOptions TurnDetectionOptions(string kind = default, bool? responseCreationEnabled = default, bool? responseInterruptionEnabled = default)
        {
            return new UnknownRealtimeTurnDetection(kind.ToTurnDetectionKind(), responseCreationEnabled, responseInterruptionEnabled, additionalBinaryDataProperties: null);
        }

        public static InputNoiseReductionOptions InputNoiseReductionOptions(string kind = default)
        {
            return new InternalUnknownRealtimeAudioNoiseReduction(kind.ToInputNoiseReductionKind(), additionalBinaryDataProperties: null);
        }

        public static ConversationTool ConversationTool(string kind = default)
        {
            return new UnknownRealtimeTool(new ConversationToolKind(kind), additionalBinaryDataProperties: null);
        }

        public static ConversationFunctionTool ConversationFunctionTool(string name = default, string description = default, BinaryData parameters = default)
        {
            return new ConversationFunctionTool(default, additionalBinaryDataProperties: null, name, description, parameters);
        }

        public static ConversationContentPart ConversationContentPart(string kind = default)
        {
            return new UnknownRealtimeContentPart(new ConversationContentPartKind(kind), additionalBinaryDataProperties: null);
        }

        public static RealtimeUpdate RealtimeUpdate(string kind = default, string eventId = default)
        {
            return new UnknownRealtimeServerEvent(kind.ToRealtimeUpdateKind(), eventId, additionalBinaryDataProperties: null);
        }

        public static InputAudioCommittedUpdate InputAudioCommittedUpdate(string eventId = default, string previousItemId = default, string itemId = default)
        {
            return new InputAudioCommittedUpdate(RealtimeUpdateKind.InputAudioCommitted, eventId, additionalBinaryDataProperties: null, previousItemId, itemId);
        }

        public static InputAudioClearedUpdate InputAudioClearedUpdate(string eventId = default)
        {
            return new InputAudioClearedUpdate(RealtimeUpdateKind.InputAudioCleared, eventId, additionalBinaryDataProperties: null);
        }

        public static InputAudioSpeechStartedUpdate InputAudioSpeechStartedUpdate(string eventId = default, string itemId = default, int audioStartMs = default)
        {
            return new InputAudioSpeechStartedUpdate(RealtimeUpdateKind.InputSpeechStarted, eventId, additionalBinaryDataProperties: null, itemId, audioStartMs);
        }

        public static InputAudioSpeechFinishedUpdate InputAudioSpeechFinishedUpdate(string eventId = default, string itemId = default, int audioEndMs = default)
        {
            return new InputAudioSpeechFinishedUpdate(RealtimeUpdateKind.InputSpeechStopped, eventId, additionalBinaryDataProperties: null, itemId, audioEndMs);
        }

        public static ItemTruncatedUpdate ItemTruncatedUpdate(string eventId = default, string itemId = default, int contentIndex = default, int audioEndMs = default)
        {
            return new ItemTruncatedUpdate(
                RealtimeUpdateKind.ItemTruncated,
                eventId,
                additionalBinaryDataProperties: null,
                itemId,
                contentIndex,
                audioEndMs);
        }

        public static ItemDeletedUpdate ItemDeletedUpdate(string eventId = default, string itemId = default)
        {
            return new ItemDeletedUpdate(RealtimeUpdateKind.ItemDeleted, eventId, additionalBinaryDataProperties: null, itemId);
        }

        public static ConversationTokenUsage ConversationTokenUsage(int totalTokenCount = default, int inputTokenCount = default, int outputTokenCount = default, ConversationInputTokenUsageDetails inputTokenDetails = default, ConversationOutputTokenUsageDetails outputTokenDetails = default)
        {
            return new ConversationTokenUsage(
                totalTokenCount,
                inputTokenCount,
                outputTokenCount,
                inputTokenDetails,
                outputTokenDetails,
                additionalBinaryDataProperties: null);
        }

        public static ConversationInputTokenUsageDetails ConversationInputTokenUsageDetails(int cachedTokenCount = default, int textTokenCount = default, int audioTokenCount = default)
        {
            return new ConversationInputTokenUsageDetails(cachedTokenCount, textTokenCount, audioTokenCount, additionalBinaryDataProperties: null);
        }

        public static ConversationOutputTokenUsageDetails ConversationOutputTokenUsageDetails(int textTokenCount = default, int audioTokenCount = default)
        {
            return new ConversationOutputTokenUsageDetails(textTokenCount, audioTokenCount, additionalBinaryDataProperties: null);
        }

        public static OutputTextFinishedUpdate OutputTextFinishedUpdate(string eventId = default, string responseId = default, string itemId = default, int outputIndex = default, int contentIndex = default, string text = default)
        {
            return new OutputTextFinishedUpdate(
                RealtimeUpdateKind.ItemStreamingPartTextFinished,
                eventId,
                additionalBinaryDataProperties: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                text);
        }

        public static OutputAudioTranscriptionFinishedUpdate OutputAudioTranscriptionFinishedUpdate(string eventId = default, string responseId = default, string itemId = default, int outputIndex = default, int contentIndex = default, string transcript = default)
        {
            return new OutputAudioTranscriptionFinishedUpdate(
                RealtimeUpdateKind.ItemStreamingPartAudioTranscriptionFinished,
                eventId,
                additionalBinaryDataProperties: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex,
                transcript);
        }

        public static OutputAudioFinishedUpdate OutputAudioFinishedUpdate(string eventId = default, string responseId = default, string itemId = default, int outputIndex = default, int contentIndex = default)
        {
            return new OutputAudioFinishedUpdate(
                RealtimeUpdateKind.ItemStreamingPartAudioFinished,
                eventId,
                additionalBinaryDataProperties: null,
                responseId,
                itemId,
                outputIndex,
                contentIndex);
        }

        public static RateLimitsUpdate RateLimitsUpdate(string eventId = default, IEnumerable<ConversationRateLimitDetailsItem> allDetails = default)
        {
            allDetails ??= new ChangeTrackingList<ConversationRateLimitDetailsItem>();

            return new RateLimitsUpdate(RealtimeUpdateKind.RateLimitsUpdated, eventId, additionalBinaryDataProperties: null, allDetails.ToList());
        }

        public static ConversationRateLimitDetailsItem ConversationRateLimitDetailsItem(string name = default, int maximumCount = default, int remainingCount = default, TimeSpan timeUntilReset = default)
        {
            return new ConversationRateLimitDetailsItem(name, maximumCount, remainingCount, timeUntilReset, additionalBinaryDataProperties: null);
        }

        public static ItemRetrievedUpdate ItemRetrievedUpdate(string eventId = default, RealtimeItem item = default)
        {
            return new ItemRetrievedUpdate(RealtimeUpdateKind.ItemRetrieved, eventId, additionalBinaryDataProperties: null, item);
        }

        public static ChatFunctionChoice ChatFunctionChoice(string predefinedFunctionChoice = default)
        {
            return new ChatFunctionChoice(predefinedFunctionChoice);
        }

        public static ChatToolChoice ChatToolChoice()
        {
            return new ChatToolChoice(additionalBinaryDataProperties: null);
        }

        public static AssistantCollectionOptions AssistantCollectionOptions(string afterId = default, string beforeId = default, int? pageSizeLimit = default, AssistantCollectionOrder? order = default)
        {
            return new AssistantCollectionOptions(afterId, beforeId, pageSizeLimit, order, additionalBinaryDataProperties: null);
        }

        public static MessageCollectionOptions MessageCollectionOptions(string afterId = default, string beforeId = default, int? pageSizeLimit = default, MessageCollectionOrder? order = default)
        {
            return new MessageCollectionOptions(afterId, beforeId, pageSizeLimit, order, additionalBinaryDataProperties: null);
        }

        public static RunCollectionOptions RunCollectionOptions(string afterId = default, string beforeId = default, int? pageSizeLimit = default, RunCollectionOrder? order = default)
        {
            return new RunCollectionOptions(afterId, beforeId, pageSizeLimit, order, additionalBinaryDataProperties: null);
        }

        public static RunStepCollectionOptions RunStepCollectionOptions(string afterId = default, string beforeId = default, int? pageSizeLimit = default, RunStepCollectionOrder? order = default)
        {
            return new RunStepCollectionOptions(afterId, beforeId, pageSizeLimit, order, additionalBinaryDataProperties: null);
        }

        public static AudioTranscription AudioTranscription(string task = default, string language = default, TimeSpan? duration = default, string text = default, IEnumerable<TranscribedWord> words = default, IEnumerable<TranscribedSegment> segments = default, IEnumerable<AudioTokenLogProbabilityDetails> transcriptionTokenLogProbabilities = default)
        {
            words ??= new ChangeTrackingList<TranscribedWord>();
            segments ??= new ChangeTrackingList<TranscribedSegment>();
            transcriptionTokenLogProbabilities ??= new ChangeTrackingList<AudioTokenLogProbabilityDetails>();

            return new AudioTranscription(
                task,
                language,
                duration,
                text,
                words.ToList(),
                segments.ToList(),
                transcriptionTokenLogProbabilities.ToList(),
                additionalBinaryDataProperties: null);
        }

        public static ChatCompletionCollectionOptions ChatCompletionCollectionOptions(string afterId = default, int? pageSizeLimit = default, ChatCompletionCollectionOrder? order = default, IDictionary<string, string> metadata = default, string model = default)
        {
            metadata ??= new ChangeTrackingDictionary<string, string>();

            return new ChatCompletionCollectionOptions(
                afterId,
                pageSizeLimit,
                order,
                metadata,
                model,
                additionalBinaryDataProperties: null);
        }

        public static ChatCompletionMessageCollectionOptions ChatCompletionMessageCollectionOptions(string afterId = default, int? pageSizeLimit = default, ChatCompletionMessageCollectionOrder? order = default)
        {
            return new ChatCompletionMessageCollectionOptions(afterId, pageSizeLimit, order, additionalBinaryDataProperties: null);
        }

        public static ContainerCollectionOptions ContainerCollectionOptions(string afterId = default, int? pageSizeLimit = default, ContainerCollectionOrder? order = default)
        {
            return new ContainerCollectionOptions(afterId, pageSizeLimit, order, additionalBinaryDataProperties: null);
        }

        public static ContainerFileCollectionOptions ContainerFileCollectionOptions(string afterId = default, int? pageSizeLimit = default, ContainerCollectionOrder? order = default)
        {
            return new ContainerFileCollectionOptions(afterId, pageSizeLimit, order, additionalBinaryDataProperties: null);
        }

        public static AudioTokenLogProbabilityDetails AudioTokenLogProbabilityDetails(string token = default, float logProbability = default, ReadOnlyMemory<byte> utf8Bytes = default)
        {
            return new AudioTokenLogProbabilityDetails(token, logProbability, utf8Bytes, additionalBinaryDataProperties: null);
        }

        public static ResponseItemCollectionOptions ResponseItemCollectionOptions(string afterId = default, string beforeId = default, int? pageSizeLimit = default, ResponseItemCollectionOrder? order = default)
        {
            return new ResponseItemCollectionOptions(afterId, beforeId, pageSizeLimit, order, additionalBinaryDataProperties: null);
        }

        public static CustomMcpToolCallApprovalPolicy CustomMcpToolCallApprovalPolicy(McpToolFilter toolsAlwaysRequiringApproval = default, McpToolFilter toolsNeverRequiringApproval = default)
        {
            return new CustomMcpToolCallApprovalPolicy(toolsAlwaysRequiringApproval, toolsNeverRequiringApproval, additionalBinaryDataProperties: null);
        }

        public static McpToolCallApprovalPolicy McpToolCallApprovalPolicy(GlobalMcpToolCallApprovalPolicy? globalPolicy = default, CustomMcpToolCallApprovalPolicy customPolicy = default)
        {
            return new McpToolCallApprovalPolicy(globalPolicy, customPolicy, additionalBinaryDataProperties: null);
        }

        public static VectorStoreCollectionOptions VectorStoreCollectionOptions(string afterId = default, string beforeId = default, int? pageSizeLimit = default, VectorStoreCollectionOrder? order = default)
        {
            return new VectorStoreCollectionOptions(afterId, beforeId, pageSizeLimit, order, additionalBinaryDataProperties: null);
        }

        public static VectorStoreFileCollectionOptions VectorStoreFileCollectionOptions(string afterId = default, string beforeId = default, int? pageSizeLimit = default, VectorStoreFileCollectionOrder? order = default, VectorStoreFileStatusFilter? filter = default)
        {
            return new VectorStoreFileCollectionOptions(
                afterId,
                beforeId,
                pageSizeLimit,
                order,
                filter,
                additionalBinaryDataProperties: null);
        }
    }
}
