// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using OpenAI;
using OpenAI.Chat;

namespace OpenAI.Assistants
{
    [Experimental("OPENAI001")]
    public partial class RunCreationOptions
    {
        private protected IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        internal RunCreationOptions(string assistantId, bool? stream, AssistantResponseFormat responseFormat, string modelOverride, string instructionsOverride, string additionalInstructions, IList<MessageCreationOptions> internalMessages, bool? allowParallelToolCalls, IList<ToolDefinition> toolsOverride, IDictionary<string, string> metadata, float? temperature, float? nucleusSamplingFactor, int? maxInputTokenCount, int? maxOutputTokenCount, RunTruncationStrategy truncationStrategy, ToolConstraint toolConstraint, ChatReasoningEffortLevel? reasoningEffortLevel, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            // Plugin customization: ensure initialization of collections
            AssistantId = assistantId;
            Stream = stream;
            ResponseFormat = responseFormat;
            ModelOverride = modelOverride;
            InstructionsOverride = instructionsOverride;
            AdditionalInstructions = additionalInstructions;
            InternalMessages = internalMessages ?? new ChangeTrackingList<MessageCreationOptions>();
            AllowParallelToolCalls = allowParallelToolCalls;
            ToolsOverride = toolsOverride ?? new ChangeTrackingList<ToolDefinition>();
            Metadata = metadata ?? new ChangeTrackingDictionary<string, string>();
            Temperature = temperature;
            NucleusSamplingFactor = nucleusSamplingFactor;
            MaxInputTokenCount = maxInputTokenCount;
            MaxOutputTokenCount = maxOutputTokenCount;
            TruncationStrategy = truncationStrategy;
            ToolConstraint = toolConstraint;
            ReasoningEffortLevel = reasoningEffortLevel;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        internal IDictionary<string, BinaryData> SerializedAdditionalRawData
        {
            get => _additionalBinaryDataProperties;
            set => _additionalBinaryDataProperties = value;
        }
    }
}
