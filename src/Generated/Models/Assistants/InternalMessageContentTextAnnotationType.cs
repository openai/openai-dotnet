// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Assistants
{
    internal readonly partial struct InternalMessageContentTextAnnotationType : IEquatable<InternalMessageContentTextAnnotationType>
    {
        private readonly string _value;
        private const string FileCitationValue = "file_citation";
        private const string FilePathValue = "file_path";

        public InternalMessageContentTextAnnotationType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalMessageContentTextAnnotationType FileCitation { get; } = new InternalMessageContentTextAnnotationType(FileCitationValue);

        internal static InternalMessageContentTextAnnotationType FilePath { get; } = new InternalMessageContentTextAnnotationType(FilePathValue);

        public static bool operator ==(InternalMessageContentTextAnnotationType left, InternalMessageContentTextAnnotationType right) => left.Equals(right);

        public static bool operator !=(InternalMessageContentTextAnnotationType left, InternalMessageContentTextAnnotationType right) => !left.Equals(right);

        public static implicit operator InternalMessageContentTextAnnotationType(string value) => new InternalMessageContentTextAnnotationType(value);

        public static implicit operator InternalMessageContentTextAnnotationType?(string value) => value == null ? null : new InternalMessageContentTextAnnotationType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalMessageContentTextAnnotationType other && Equals(other);

        public bool Equals(InternalMessageContentTextAnnotationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
