// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using OpenAI;

namespace OpenAI.Assistants
{
    [Experimental("OPENAI001")]
    public partial class ThreadMessage
    {
        private protected IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        internal ThreadMessage(string id, DateTimeOffset createdAt, string threadId, MessageStatus status, MessageFailureDetails incompleteDetails, DateTimeOffset? completedAt, DateTimeOffset? incompleteAt, MessageRole role, string assistantId, string runId, IEnumerable<MessageCreationAttachment> attachments)
        {
            Id = id;
            CreatedAt = createdAt;
            ThreadId = threadId;
            Status = status;
            IncompleteDetails = incompleteDetails;
            CompletedAt = completedAt;
            IncompleteAt = incompleteAt;
            Role = role;
            Content = new ChangeTrackingList<MessageContent>();
            AssistantId = assistantId;
            RunId = runId;
            Attachments = attachments.ToList();
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        internal ThreadMessage(string id, string @object, DateTimeOffset createdAt, string threadId, MessageStatus status, MessageFailureDetails incompleteDetails, DateTimeOffset? completedAt, DateTimeOffset? incompleteAt, MessageRole role, IReadOnlyList<MessageContent> content, string assistantId, string runId, IReadOnlyList<MessageCreationAttachment> attachments, IReadOnlyDictionary<string, string> metadata, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            // Plugin customization: ensure initialization of collections
            Id = id;
            Object = @object;
            CreatedAt = createdAt;
            ThreadId = threadId;
            Status = status;
            IncompleteDetails = incompleteDetails;
            CompletedAt = completedAt;
            IncompleteAt = incompleteAt;
            Role = role;
            Content = content ?? new ChangeTrackingList<MessageContent>();
            AssistantId = assistantId;
            RunId = runId;
            Attachments = attachments ?? new ChangeTrackingList<MessageCreationAttachment>();
            Metadata = metadata ?? new ChangeTrackingDictionary<string, string>();
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        public string Id { get; }

        public DateTimeOffset CreatedAt { get; }

        public string ThreadId { get; }

        public MessageStatus Status { get; }

        public MessageFailureDetails IncompleteDetails { get; }

        public DateTimeOffset? CompletedAt { get; }

        public DateTimeOffset? IncompleteAt { get; }

        public IReadOnlyList<MessageContent> Content { get; }

        public string AssistantId { get; }

        public string RunId { get; }

        public IReadOnlyDictionary<string, string> Metadata { get; }

        internal IDictionary<string, BinaryData> SerializedAdditionalRawData
        {
            get => _additionalBinaryDataProperties;
            set => _additionalBinaryDataProperties = value;
        }
    }
}
