// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Audio
{
    internal readonly partial struct InternalCreateTranscriptionRequestModel : IEquatable<InternalCreateTranscriptionRequestModel>
    {
        private readonly string _value;
        private const string Whisper1Value = "whisper-1";
        private const string Gpt4oTranscribeValue = "gpt-4o-transcribe";
        private const string Gpt4oMiniTranscribeValue = "gpt-4o-mini-transcribe";

        public InternalCreateTranscriptionRequestModel(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalCreateTranscriptionRequestModel Whisper1 { get; } = new InternalCreateTranscriptionRequestModel(Whisper1Value);

        internal static InternalCreateTranscriptionRequestModel Gpt4oTranscribe { get; } = new InternalCreateTranscriptionRequestModel(Gpt4oTranscribeValue);

        internal static InternalCreateTranscriptionRequestModel Gpt4oMiniTranscribe { get; } = new InternalCreateTranscriptionRequestModel(Gpt4oMiniTranscribeValue);

        public static bool operator ==(InternalCreateTranscriptionRequestModel left, InternalCreateTranscriptionRequestModel right) => left.Equals(right);

        public static bool operator !=(InternalCreateTranscriptionRequestModel left, InternalCreateTranscriptionRequestModel right) => !left.Equals(right);

        public static implicit operator InternalCreateTranscriptionRequestModel(string value) => new InternalCreateTranscriptionRequestModel(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalCreateTranscriptionRequestModel other && Equals(other);

        public bool Equals(InternalCreateTranscriptionRequestModel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
