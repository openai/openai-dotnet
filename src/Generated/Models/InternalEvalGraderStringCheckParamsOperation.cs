// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Evals
{
    internal readonly partial struct InternalEvalGraderStringCheckParamsOperation : IEquatable<InternalEvalGraderStringCheckParamsOperation>
    {
        private readonly string _value;
        private const string EqValue = "eq";
        private const string NeValue = "ne";
        private const string LikeValue = "like";
        private const string IlikeValue = "ilike";

        public InternalEvalGraderStringCheckParamsOperation(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalEvalGraderStringCheckParamsOperation Eq { get; } = new InternalEvalGraderStringCheckParamsOperation(EqValue);

        internal static InternalEvalGraderStringCheckParamsOperation Ne { get; } = new InternalEvalGraderStringCheckParamsOperation(NeValue);

        internal static InternalEvalGraderStringCheckParamsOperation Like { get; } = new InternalEvalGraderStringCheckParamsOperation(LikeValue);

        internal static InternalEvalGraderStringCheckParamsOperation Ilike { get; } = new InternalEvalGraderStringCheckParamsOperation(IlikeValue);

        public static bool operator ==(InternalEvalGraderStringCheckParamsOperation left, InternalEvalGraderStringCheckParamsOperation right) => left.Equals(right);

        public static bool operator !=(InternalEvalGraderStringCheckParamsOperation left, InternalEvalGraderStringCheckParamsOperation right) => !left.Equals(right);

        public static implicit operator InternalEvalGraderStringCheckParamsOperation(string value) => new InternalEvalGraderStringCheckParamsOperation(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalEvalGraderStringCheckParamsOperation other && Equals(other);

        public bool Equals(InternalEvalGraderStringCheckParamsOperation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
