// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Chat
{
    internal readonly partial struct InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type : IEquatable<InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type>
    {
        private readonly string _value;
        private const string ApproximateValue = "approximate";

        public InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type Approximate { get; } = new InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type(ApproximateValue);

        public static bool operator ==(InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type left, InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type right) => left.Equals(right);

        public static bool operator !=(InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type left, InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type right) => !left.Equals(right);

        public static implicit operator InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type(string value) => new InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type other && Equals(other);

        public bool Equals(InternalCreateChatCompletionRequestWebSearchOptionsUserLocation1Type other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
