// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Audio
{
    internal readonly partial struct InternalCreateTranscriptionRequestAccept : IEquatable<InternalCreateTranscriptionRequestAccept>
    {
        private readonly string _value;
        private const string ApplicationJsonValue = "application/json";
        private const string TextEventStreamValue = "text/event-stream";

        public InternalCreateTranscriptionRequestAccept(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalCreateTranscriptionRequestAccept ApplicationJson { get; } = new InternalCreateTranscriptionRequestAccept(ApplicationJsonValue);

        internal static InternalCreateTranscriptionRequestAccept TextEventStream { get; } = new InternalCreateTranscriptionRequestAccept(TextEventStreamValue);

        public static bool operator ==(InternalCreateTranscriptionRequestAccept left, InternalCreateTranscriptionRequestAccept right) => left.Equals(right);

        public static bool operator !=(InternalCreateTranscriptionRequestAccept left, InternalCreateTranscriptionRequestAccept right) => !left.Equals(right);

        public static implicit operator InternalCreateTranscriptionRequestAccept(string value) => new InternalCreateTranscriptionRequestAccept(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalCreateTranscriptionRequestAccept other && Equals(other);

        public bool Equals(InternalCreateTranscriptionRequestAccept other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
