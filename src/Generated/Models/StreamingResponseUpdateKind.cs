// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Responses
{
    public readonly partial struct StreamingResponseUpdateKind : IEquatable<StreamingResponseUpdateKind>
    {
        private readonly string _value;
        private const string ErrorValue = "error";
        private const string ResponseCompletedValue = "response.completed";
        private const string ResponseContentPartAddedValue = "response.content_part.added";
        private const string ResponseContentPartDoneValue = "response.content_part.done";
        private const string ResponseCreatedValue = "response.created";
        private const string ResponseFailedValue = "response.failed";
        private const string ResponseFileSearchCallCompletedValue = "response.file_search_call.completed";
        private const string ResponseFileSearchCallInProgressValue = "response.file_search_call.in.progress";
        private const string ResponseFileSearchCallSearchingValue = "response.file_search_call.searching";
        private const string ResponseFunctionCallArgumentsDeltaValue = "response.function_call_arguments.delta";
        private const string ResponseFunctionCallArgumentsDoneValue = "response.function_call_arguments.done";
        private const string ResponseInProgressValue = "response.in_progress";
        private const string ResponseIncompleteValue = "response.incomplete";
        private const string ResponseOutputItemAddedValue = "response.output_item.added";
        private const string ResponseOutputItemDoneValue = "response.output_item.done";
        private const string ResponseOutputTextAnnotationAddedValue = "response.output_text.annotation.added";
        private const string ResponseOutputTextDeltaValue = "response.output_text.delta";
        private const string ResponseOutputTextDoneValue = "response.output_text.done";
        private const string ResponseRefusalDeltaValue = "response.refusal.delta";
        private const string ResponseRefusalDoneValue = "response.refusal.done";
        private const string ResponseWebSearchCallCompletedValue = "response.web_search_call.completed";
        private const string ResponseWebSearchCallInProgressValue = "response.web_search_call.in_progress";
        private const string ResponseWebSearchCallSearchingValue = "response.web_search_call.searching";

        public StreamingResponseUpdateKind(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static StreamingResponseUpdateKind Error { get; } = new StreamingResponseUpdateKind(ErrorValue);

        public static StreamingResponseUpdateKind ResponseCompleted { get; } = new StreamingResponseUpdateKind(ResponseCompletedValue);

        public static StreamingResponseUpdateKind ResponseContentPartAdded { get; } = new StreamingResponseUpdateKind(ResponseContentPartAddedValue);

        public static StreamingResponseUpdateKind ResponseContentPartDone { get; } = new StreamingResponseUpdateKind(ResponseContentPartDoneValue);

        public static StreamingResponseUpdateKind ResponseCreated { get; } = new StreamingResponseUpdateKind(ResponseCreatedValue);

        public static StreamingResponseUpdateKind ResponseFailed { get; } = new StreamingResponseUpdateKind(ResponseFailedValue);

        public static StreamingResponseUpdateKind ResponseFileSearchCallCompleted { get; } = new StreamingResponseUpdateKind(ResponseFileSearchCallCompletedValue);

        public static StreamingResponseUpdateKind ResponseFileSearchCallInProgress { get; } = new StreamingResponseUpdateKind(ResponseFileSearchCallInProgressValue);

        public static StreamingResponseUpdateKind ResponseFileSearchCallSearching { get; } = new StreamingResponseUpdateKind(ResponseFileSearchCallSearchingValue);

        public static StreamingResponseUpdateKind ResponseFunctionCallArgumentsDelta { get; } = new StreamingResponseUpdateKind(ResponseFunctionCallArgumentsDeltaValue);

        public static StreamingResponseUpdateKind ResponseFunctionCallArgumentsDone { get; } = new StreamingResponseUpdateKind(ResponseFunctionCallArgumentsDoneValue);

        public static StreamingResponseUpdateKind ResponseInProgress { get; } = new StreamingResponseUpdateKind(ResponseInProgressValue);

        public static StreamingResponseUpdateKind ResponseIncomplete { get; } = new StreamingResponseUpdateKind(ResponseIncompleteValue);

        public static StreamingResponseUpdateKind ResponseOutputItemAdded { get; } = new StreamingResponseUpdateKind(ResponseOutputItemAddedValue);

        public static StreamingResponseUpdateKind ResponseOutputItemDone { get; } = new StreamingResponseUpdateKind(ResponseOutputItemDoneValue);

        public static StreamingResponseUpdateKind ResponseOutputTextAnnotationAdded { get; } = new StreamingResponseUpdateKind(ResponseOutputTextAnnotationAddedValue);

        public static StreamingResponseUpdateKind ResponseOutputTextDelta { get; } = new StreamingResponseUpdateKind(ResponseOutputTextDeltaValue);

        public static StreamingResponseUpdateKind ResponseOutputTextDone { get; } = new StreamingResponseUpdateKind(ResponseOutputTextDoneValue);

        public static StreamingResponseUpdateKind ResponseRefusalDelta { get; } = new StreamingResponseUpdateKind(ResponseRefusalDeltaValue);

        public static StreamingResponseUpdateKind ResponseRefusalDone { get; } = new StreamingResponseUpdateKind(ResponseRefusalDoneValue);

        public static StreamingResponseUpdateKind ResponseWebSearchCallCompleted { get; } = new StreamingResponseUpdateKind(ResponseWebSearchCallCompletedValue);

        public static StreamingResponseUpdateKind ResponseWebSearchCallInProgress { get; } = new StreamingResponseUpdateKind(ResponseWebSearchCallInProgressValue);

        public static StreamingResponseUpdateKind ResponseWebSearchCallSearching { get; } = new StreamingResponseUpdateKind(ResponseWebSearchCallSearchingValue);

        public static bool operator ==(StreamingResponseUpdateKind left, StreamingResponseUpdateKind right) => left.Equals(right);

        public static bool operator !=(StreamingResponseUpdateKind left, StreamingResponseUpdateKind right) => !left.Equals(right);

        public static implicit operator StreamingResponseUpdateKind(string value) => new StreamingResponseUpdateKind(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StreamingResponseUpdateKind other && Equals(other);

        public bool Equals(StreamingResponseUpdateKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
