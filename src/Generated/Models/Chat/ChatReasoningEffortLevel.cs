// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Chat
{
    [Experimental("OPENAI001")]
    public readonly partial struct ChatReasoningEffortLevel : IEquatable<ChatReasoningEffortLevel>
    {
        private readonly string _value;
        private const string LowValue = "low";
        private const string MediumValue = "medium";
        private const string HighValue = "high";

        public ChatReasoningEffortLevel(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static ChatReasoningEffortLevel Low { get; } = new ChatReasoningEffortLevel(LowValue);

        public static ChatReasoningEffortLevel Medium { get; } = new ChatReasoningEffortLevel(MediumValue);

        public static ChatReasoningEffortLevel High { get; } = new ChatReasoningEffortLevel(HighValue);

        public static bool operator ==(ChatReasoningEffortLevel left, ChatReasoningEffortLevel right) => left.Equals(right);

        public static bool operator !=(ChatReasoningEffortLevel left, ChatReasoningEffortLevel right) => !left.Equals(right);

        public static implicit operator ChatReasoningEffortLevel(string value) => new ChatReasoningEffortLevel(value);

        public static implicit operator ChatReasoningEffortLevel?(string value) => value == null ? null : new ChatReasoningEffortLevel(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ChatReasoningEffortLevel other && Equals(other);

        public bool Equals(ChatReasoningEffortLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
