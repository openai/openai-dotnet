// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Text;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Chat
{
    public partial class ChatTokenLogProbabilityDetails : IJsonModel<ChatTokenLogProbabilityDetails>
    {
        internal ChatTokenLogProbabilityDetails() : this(null, default, default, null, default)
        {
        }

        void IJsonModel<ChatTokenLogProbabilityDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        [Experimental("OPENAI001")]
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatTokenLogProbabilityDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ChatTokenLogProbabilityDetails)} does not support writing '{format}' format.");
            }
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (!Patch.Contains("$.token"u8))
            {
                writer.WritePropertyName("token"u8);
                writer.WriteStringValue(Token);
            }
            if (!Patch.Contains("$.logprob"u8))
            {
                writer.WritePropertyName("logprob"u8);
                writer.WriteNumberValue(LogProbability);
            }
            if (Patch.Contains("$.bytes"u8))
            {
                if (!Patch.IsRemoved("$.bytes"u8))
                {
                    writer.WritePropertyName("bytes"u8);
                    writer.WriteRawValue(Patch.GetJson("$.bytes"u8));
                }
            }
            else if (Optional.IsDefined(Utf8Bytes))
            {
                writer.WritePropertyName("bytes"u8);
                writer.WriteStartArray();
                for (int i = 0; i < Utf8Bytes.Value.Span.Length; i++)
                {
                    if (Patch.IsRemoved(Encoding.UTF8.GetBytes($"$.bytes[{i}]")))
                    {
                        continue;
                    }
                    writer.WriteNumberValue(Utf8Bytes.Value.Span[i]);
                }
                Patch.WriteTo(writer, "$.bytes"u8);
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNull("bytes"u8);
            }
            if (Patch.Contains("$.top_logprobs"u8))
            {
                if (!Patch.IsRemoved("$.top_logprobs"u8))
                {
                    writer.WritePropertyName("top_logprobs"u8);
                    writer.WriteRawValue(Patch.GetJson("$.top_logprobs"u8));
                }
            }
            else
            {
                writer.WritePropertyName("top_logprobs"u8);
                writer.WriteStartArray();
                for (int i = 0; i < TopLogProbabilities.Count; i++)
                {
                    if (TopLogProbabilities[i].Patch.IsRemoved("$"u8))
                    {
                        continue;
                    }
                    writer.WriteObjectValue(TopLogProbabilities[i], options);
                }
                Patch.WriteTo(writer, "$.top_logprobs"u8);
                writer.WriteEndArray();
            }

            Patch.WriteTo(writer);
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        ChatTokenLogProbabilityDetails IJsonModel<ChatTokenLogProbabilityDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        [Experimental("OPENAI001")]
        protected virtual ChatTokenLogProbabilityDetails JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatTokenLogProbabilityDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ChatTokenLogProbabilityDetails)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeChatTokenLogProbabilityDetails(document.RootElement, null, options);
        }

        internal static ChatTokenLogProbabilityDetails DeserializeChatTokenLogProbabilityDetails(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string token = default;
            float logProbability = default;
            ReadOnlyMemory<byte>? utf8Bytes = default;
            IReadOnlyList<ChatTokenTopLogProbabilityDetails> topLogProbabilities = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            JsonPatch patch = new JsonPatch(data is null ? ReadOnlyMemory<byte>.Empty : data.ToMemory());
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("token"u8))
                {
                    token = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("logprob"u8))
                {
                    logProbability = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("bytes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    int index = 0;
                    byte[] array = new byte[prop.Value.GetArrayLength()];
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array[index] = item.GetByte();
                        index++;
                    }
                    utf8Bytes = new ReadOnlyMemory<byte>(array);
                    continue;
                }
                if (prop.NameEquals("top_logprobs"u8))
                {
                    List<ChatTokenTopLogProbabilityDetails> array = new List<ChatTokenTopLogProbabilityDetails>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(ChatTokenTopLogProbabilityDetails.DeserializeChatTokenTopLogProbabilityDetails(item, item.GetUtf8Bytes(), options));
                    }
                    topLogProbabilities = array;
                    continue;
                }
                patch.Set([.. "$."u8, .. Encoding.UTF8.GetBytes(prop.Name)], prop.Value.GetUtf8Bytes());
            }
            return new ChatTokenLogProbabilityDetails(token, logProbability, utf8Bytes, topLogProbabilities, patch);
        }

        BinaryData IPersistableModel<ChatTokenLogProbabilityDetails>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        [Experimental("OPENAI001")]
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatTokenLogProbabilityDetails>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ChatTokenLogProbabilityDetails)} does not support writing '{options.Format}' format.");
            }
        }

        ChatTokenLogProbabilityDetails IPersistableModel<ChatTokenLogProbabilityDetails>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        [Experimental("OPENAI001")]
        protected virtual ChatTokenLogProbabilityDetails PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatTokenLogProbabilityDetails>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeChatTokenLogProbabilityDetails(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ChatTokenLogProbabilityDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ChatTokenLogProbabilityDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
