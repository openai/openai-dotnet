// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Chat
{
    [Experimental("OPENAI001")]
    public readonly partial struct ChatOutputAudioVoice : IEquatable<ChatOutputAudioVoice>
    {
        private readonly string _value;
        private const string AlloyValue = "alloy";
        private const string AshValue = "ash";
        private const string BalladValue = "ballad";
        private const string CoralValue = "coral";
        private const string EchoValue = "echo";
        private const string FableValue = "fable";
        private const string OnyxValue = "onyx";
        private const string NovaValue = "nova";
        private const string SageValue = "sage";
        private const string ShimmerValue = "shimmer";
        private const string VerseValue = "verse";

        public ChatOutputAudioVoice(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static ChatOutputAudioVoice Alloy { get; } = new ChatOutputAudioVoice(AlloyValue);

        public static ChatOutputAudioVoice Ash { get; } = new ChatOutputAudioVoice(AshValue);

        public static ChatOutputAudioVoice Ballad { get; } = new ChatOutputAudioVoice(BalladValue);

        public static ChatOutputAudioVoice Coral { get; } = new ChatOutputAudioVoice(CoralValue);

        public static ChatOutputAudioVoice Echo { get; } = new ChatOutputAudioVoice(EchoValue);

        public static ChatOutputAudioVoice Fable { get; } = new ChatOutputAudioVoice(FableValue);

        public static ChatOutputAudioVoice Onyx { get; } = new ChatOutputAudioVoice(OnyxValue);

        public static ChatOutputAudioVoice Nova { get; } = new ChatOutputAudioVoice(NovaValue);

        public static ChatOutputAudioVoice Sage { get; } = new ChatOutputAudioVoice(SageValue);

        public static ChatOutputAudioVoice Shimmer { get; } = new ChatOutputAudioVoice(ShimmerValue);

        public static ChatOutputAudioVoice Verse { get; } = new ChatOutputAudioVoice(VerseValue);

        public static bool operator ==(ChatOutputAudioVoice left, ChatOutputAudioVoice right) => left.Equals(right);

        public static bool operator !=(ChatOutputAudioVoice left, ChatOutputAudioVoice right) => !left.Equals(right);

        public static implicit operator ChatOutputAudioVoice(string value) => new ChatOutputAudioVoice(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ChatOutputAudioVoice other && Equals(other);

        public bool Equals(ChatOutputAudioVoice other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
