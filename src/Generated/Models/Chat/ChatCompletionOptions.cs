// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Chat
{
    public partial class ChatCompletionOptions
    {
        private protected IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        internal ChatCompletionOptions(IDictionary<string, string> metadata, float? temperature, float? topP, string endUserId, ChatServiceTier? serviceTier, IList<ChatMessage> messages, string model, IList<InternalCreateChatCompletionRequestModality> internalModalities, ChatReasoningEffortLevel? reasoningEffortLevel, int? maxOutputTokenCount, float? frequencyPenalty, float? presencePenalty, ChatWebSearchOptions webSearchOptions, int? topLogProbabilityCount, ChatResponseFormat responseFormat, ChatAudioOptions audioOptions, bool? storedOutputEnabled, bool? stream, IList<string> stopSequences, IDictionary<int, int> logitBiases, bool? includeLogProbabilities, int? deprecatedMaxTokens, int? n, ChatOutputPrediction outputPrediction, long? seed, InternalChatCompletionStreamOptions streamOptions, IList<ChatTool> tools, ChatToolChoice toolChoice, bool? allowParallelToolCalls, ChatFunctionChoice functionChoice, IList<ChatFunction> functions, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            // Plugin customization: ensure initialization of collections
            Metadata = metadata ?? new ChangeTrackingDictionary<string, string>();
            Temperature = temperature;
            TopP = topP;
            EndUserId = endUserId;
            ServiceTier = serviceTier;
            Messages = messages ?? new ChangeTrackingList<ChatMessage>();
            Model = model;
            InternalModalities = internalModalities ?? new ChangeTrackingList<InternalCreateChatCompletionRequestModality>();
            ReasoningEffortLevel = reasoningEffortLevel;
            MaxOutputTokenCount = maxOutputTokenCount;
            FrequencyPenalty = frequencyPenalty;
            PresencePenalty = presencePenalty;
            WebSearchOptions = webSearchOptions;
            TopLogProbabilityCount = topLogProbabilityCount;
            ResponseFormat = responseFormat;
            AudioOptions = audioOptions;
            StoredOutputEnabled = storedOutputEnabled;
            Stream = stream;
            StopSequences = stopSequences ?? new ChangeTrackingList<string>();
            LogitBiases = logitBiases ?? new ChangeTrackingDictionary<int, int>();
            IncludeLogProbabilities = includeLogProbabilities;
            _deprecatedMaxTokens = deprecatedMaxTokens;
            N = n;
            OutputPrediction = outputPrediction;
            Seed = seed;
            StreamOptions = streamOptions;
            Tools = tools ?? new ChangeTrackingList<ChatTool>();
            ToolChoice = toolChoice;
            AllowParallelToolCalls = allowParallelToolCalls;
            FunctionChoice = functionChoice;
            Functions = functions ?? new ChangeTrackingList<ChatFunction>();
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        public float? Temperature { get; set; }

        public float? TopP { get; set; }

        [Experimental("OPENAI001")]
        public ChatServiceTier? ServiceTier { get; set; }

        public float? FrequencyPenalty { get; set; }

        public float? PresencePenalty { get; set; }

        [Experimental("OPENAI001")]
        public ChatWebSearchOptions WebSearchOptions { get; set; }

        [Experimental("OPENAI001")]
        public long? Seed { get; set; }

        public IList<ChatTool> Tools { get; }

        internal IDictionary<string, BinaryData> SerializedAdditionalRawData
        {
            get => _additionalBinaryDataProperties;
            set => _additionalBinaryDataProperties = value;
        }
    }
}
