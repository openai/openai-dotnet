// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Text;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Chat
{
    public partial class ChatCompletionOptions : IJsonModel<ChatCompletionOptions>
    {
        public ChatCompletionOptions() : this(null, default, default, null, default, null, null, null, default, default, default, default, null, default, null, null, default, default, null, null, default, default, default, null, default, null, null, null, default, null, null, default)
        {
        }

        void IJsonModel<ChatCompletionOptions>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        [Experimental("OPENAI001")]
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatCompletionOptions>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ChatCompletionOptions)} does not support writing '{format}' format.");
            }
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Optional.IsCollectionDefined(Metadata) && !Patch.Contains("$.metadata"u8))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteStartObject();
#if NET8_0_OR_GREATER
                global::System.Span<byte> buffer = stackalloc byte[256];
#endif
                foreach (var item in Metadata)
                {
#if NET8_0_OR_GREATER
                    int bytesWritten = global::System.Text.Encoding.UTF8.GetBytes(item.Key.AsSpan(), buffer);
                    bool patchContains = (bytesWritten == 256) ? Patch.Contains("$.metadata"u8, global::System.Text.Encoding.UTF8.GetBytes(item.Key)) : Patch.Contains("$.metadata"u8, buffer.Slice(0, bytesWritten));
#else
                    bool patchContains = Patch.Contains("$.metadata"u8, Encoding.UTF8.GetBytes(item.Key));
#endif
                    if (!patchContains)
                    {
                        writer.WritePropertyName(item.Key);
                        if (item.Value == null)
                        {
                            writer.WriteNullValue();
                            continue;
                        }
                        writer.WriteStringValue(item.Value);
                    }
                }

                Patch.WriteTo(writer, "$.metadata"u8);
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Temperature) && !Patch.Contains("$.temperature"u8))
            {
                writer.WritePropertyName("temperature"u8);
                writer.WriteNumberValue(Temperature.Value);
            }
            if (Optional.IsDefined(TopP) && !Patch.Contains("$.top_p"u8))
            {
                writer.WritePropertyName("top_p"u8);
                writer.WriteNumberValue(TopP.Value);
            }
            if (Optional.IsDefined(EndUserId) && !Patch.Contains("$.user"u8))
            {
                writer.WritePropertyName("user"u8);
                writer.WriteStringValue(EndUserId);
            }
            if (Optional.IsDefined(ServiceTier) && !Patch.Contains("$.service_tier"u8))
            {
                writer.WritePropertyName("service_tier"u8);
                writer.WriteStringValue(ServiceTier.Value.ToString());
            }
            if (Patch.Contains("$.messages"u8))
            {
                if (!Patch.IsRemoved("$.messages"u8))
                {
                    writer.WritePropertyName("messages"u8);
                    writer.WriteRawValue(Patch.GetJson("$.messages"u8));
                }
            }
            else
            {
                // Plugin customization: apply Optional.Is*Defined() check based on type name dictionary lookup
                if (Optional.IsCollectionDefined(Messages))
                {
                    writer.WritePropertyName("messages"u8);
                    SerializeMessagesValue(writer, options);
                }
            }
            // Plugin customization: apply Optional.Is*Defined() check based on type name dictionary lookup
            if (Optional.IsDefined(Model) && !Patch.Contains("$.model"u8))
            {
                writer.WritePropertyName("model"u8);
                writer.WriteStringValue(Model);
            }
            if (Patch.Contains("$.modalities"u8))
            {
                if (!Patch.IsRemoved("$.modalities"u8))
                {
                    writer.WritePropertyName("modalities"u8);
                    writer.WriteRawValue(Patch.GetJson("$.modalities"u8));
                }
            }
            else if (Optional.IsCollectionDefined(InternalModalities))
            {
                writer.WritePropertyName("modalities"u8);
                writer.WriteStartArray();
                for (int i = 0; i < InternalModalities.Count; i++)
                {
                    if (Patch.IsRemoved(Encoding.UTF8.GetBytes($"$.modalities[{i}]")))
                    {
                        continue;
                    }
                    writer.WriteStringValue(InternalModalities[i].ToString());
                }
                Patch.WriteTo(writer, "$.modalities"u8);
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ReasoningEffortLevel) && !Patch.Contains("$.reasoning_effort"u8))
            {
                writer.WritePropertyName("reasoning_effort"u8);
                writer.WriteStringValue(ReasoningEffortLevel.Value.ToString());
            }
            if (Optional.IsDefined(MaxOutputTokenCount) && !Patch.Contains("$.max_completion_tokens"u8))
            {
                writer.WritePropertyName("max_completion_tokens"u8);
                writer.WriteNumberValue(MaxOutputTokenCount.Value);
            }
            if (Optional.IsDefined(FrequencyPenalty) && !Patch.Contains("$.frequency_penalty"u8))
            {
                writer.WritePropertyName("frequency_penalty"u8);
                writer.WriteNumberValue(FrequencyPenalty.Value);
            }
            if (Optional.IsDefined(PresencePenalty) && !Patch.Contains("$.presence_penalty"u8))
            {
                writer.WritePropertyName("presence_penalty"u8);
                writer.WriteNumberValue(PresencePenalty.Value);
            }
            if (Optional.IsDefined(WebSearchOptions) && !Patch.Contains("$.web_search_options"u8))
            {
                writer.WritePropertyName("web_search_options"u8);
                writer.WriteObjectValue(WebSearchOptions, options);
            }
            if (Optional.IsDefined(TopLogProbabilityCount) && !Patch.Contains("$.top_logprobs"u8))
            {
                writer.WritePropertyName("top_logprobs"u8);
                writer.WriteNumberValue(TopLogProbabilityCount.Value);
            }
            if (Optional.IsDefined(ResponseFormat) && !Patch.Contains("$.response_format"u8))
            {
                writer.WritePropertyName("response_format"u8);
                writer.WriteObjectValue(ResponseFormat, options);
            }
            if (Optional.IsDefined(AudioOptions) && !Patch.Contains("$.audio"u8))
            {
                writer.WritePropertyName("audio"u8);
                writer.WriteObjectValue(AudioOptions, options);
            }
            if (Optional.IsDefined(StoredOutputEnabled) && !Patch.Contains("$.store"u8))
            {
                writer.WritePropertyName("store"u8);
                writer.WriteBooleanValue(StoredOutputEnabled.Value);
            }
            if (Optional.IsDefined(Stream) && !Patch.Contains("$.stream"u8))
            {
                writer.WritePropertyName("stream"u8);
                writer.WriteBooleanValue(Stream.Value);
            }
            if (Patch.Contains("$.stop"u8))
            {
                if (!Patch.IsRemoved("$.stop"u8))
                {
                    writer.WritePropertyName("stop"u8);
                    writer.WriteRawValue(Patch.GetJson("$.stop"u8));
                }
            }
            else if (Optional.IsCollectionDefined(StopSequences))
            {
                writer.WritePropertyName("stop"u8);
                SerializeStopSequencesValue(writer, options);
            }
            if (Optional.IsCollectionDefined(LogitBiases) && !Patch.Contains("$.logit_bias"u8))
            {
                writer.WritePropertyName("logit_bias"u8);
                SerializeLogitBiasesValue(writer, options);
            }
            if (Optional.IsDefined(IncludeLogProbabilities) && !Patch.Contains("$.logprobs"u8))
            {
                writer.WritePropertyName("logprobs"u8);
                writer.WriteBooleanValue(IncludeLogProbabilities.Value);
            }
            if (Optional.IsDefined(_deprecatedMaxTokens) && !Patch.Contains("$.max_tokens"u8))
            {
                writer.WritePropertyName("max_tokens"u8);
                writer.WriteNumberValue(_deprecatedMaxTokens.Value);
            }
            if (Optional.IsDefined(N) && !Patch.Contains("$.n"u8))
            {
                writer.WritePropertyName("n"u8);
                writer.WriteNumberValue(N.Value);
            }
            if (Optional.IsDefined(OutputPrediction) && !Patch.Contains("$.prediction"u8))
            {
                writer.WritePropertyName("prediction"u8);
                writer.WriteObjectValue(OutputPrediction, options);
            }
            if (Optional.IsDefined(Seed) && !Patch.Contains("$.seed"u8))
            {
                writer.WritePropertyName("seed"u8);
                writer.WriteNumberValue(Seed.Value);
            }
            if (Optional.IsDefined(StreamOptions) && !Patch.Contains("$.stream_options"u8))
            {
                writer.WritePropertyName("stream_options"u8);
                writer.WriteObjectValue(StreamOptions, options);
            }
            if (Patch.Contains("$.tools"u8))
            {
                if (!Patch.IsRemoved("$.tools"u8))
                {
                    writer.WritePropertyName("tools"u8);
                    writer.WriteRawValue(Patch.GetJson("$.tools"u8));
                }
            }
            else if (Optional.IsCollectionDefined(Tools))
            {
                writer.WritePropertyName("tools"u8);
                writer.WriteStartArray();
                for (int i = 0; i < Tools.Count; i++)
                {
                    if (Tools[i].Patch.IsRemoved("$"u8))
                    {
                        continue;
                    }
                    writer.WriteObjectValue(Tools[i], options);
                }
                Patch.WriteTo(writer, "$.tools"u8);
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ToolChoice) && !Patch.Contains("$.tool_choice"u8))
            {
                writer.WritePropertyName("tool_choice"u8);
                writer.WriteObjectValue(ToolChoice, options);
            }
            if (Optional.IsDefined(AllowParallelToolCalls) && !Patch.Contains("$.parallel_tool_calls"u8))
            {
                writer.WritePropertyName("parallel_tool_calls"u8);
                writer.WriteBooleanValue(AllowParallelToolCalls.Value);
            }
            if (Optional.IsDefined(FunctionChoice) && !Patch.Contains("$.function_call"u8))
            {
                writer.WritePropertyName("function_call"u8);
                writer.WriteObjectValue(FunctionChoice, options);
            }
            if (Patch.Contains("$.functions"u8))
            {
                if (!Patch.IsRemoved("$.functions"u8))
                {
                    writer.WritePropertyName("functions"u8);
                    writer.WriteRawValue(Patch.GetJson("$.functions"u8));
                }
            }
            else if (Optional.IsCollectionDefined(Functions))
            {
                writer.WritePropertyName("functions"u8);
                writer.WriteStartArray();
                for (int i = 0; i < Functions.Count; i++)
                {
                    if (Functions[i].Patch.IsRemoved("$"u8))
                    {
                        continue;
                    }
                    writer.WriteObjectValue(Functions[i], options);
                }
                Patch.WriteTo(writer, "$.functions"u8);
                writer.WriteEndArray();
            }

            Patch.WriteTo(writer);
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        ChatCompletionOptions IJsonModel<ChatCompletionOptions>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        [Experimental("OPENAI001")]
        protected virtual ChatCompletionOptions JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatCompletionOptions>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ChatCompletionOptions)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeChatCompletionOptions(document.RootElement, null, options);
        }

        internal static ChatCompletionOptions DeserializeChatCompletionOptions(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> metadata = default;
            float? temperature = default;
            float? topP = default;
            string endUserId = default;
            ChatServiceTier? serviceTier = default;
            IList<ChatMessage> messages = default;
            string model = default;
            IList<InternalCreateChatCompletionRequestModality> internalModalities = default;
            ChatReasoningEffortLevel? reasoningEffortLevel = default;
            int? maxOutputTokenCount = default;
            float? frequencyPenalty = default;
            float? presencePenalty = default;
            ChatWebSearchOptions webSearchOptions = default;
            int? topLogProbabilityCount = default;
            ChatResponseFormat responseFormat = default;
            ChatAudioOptions audioOptions = default;
            bool? storedOutputEnabled = default;
            bool? stream = default;
            IList<string> stopSequences = default;
            IDictionary<int, int> logitBiases = default;
            bool? includeLogProbabilities = default;
            int? deprecatedMaxTokens = default;
            int? n = default;
            ChatOutputPrediction outputPrediction = default;
            long? seed = default;
            InternalChatCompletionStreamOptions streamOptions = default;
            IList<ChatTool> tools = default;
            ChatToolChoice toolChoice = default;
            bool? allowParallelToolCalls = default;
            ChatFunctionChoice functionChoice = default;
            IList<ChatFunction> functions = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            JsonPatch patch = new JsonPatch(data is null ? ReadOnlyMemory<byte>.Empty : data.ToMemory());
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("metadata"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetString());
                        }
                    }
                    metadata = dictionary;
                    continue;
                }
                if (prop.NameEquals("temperature"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        temperature = null;
                        continue;
                    }
                    temperature = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("top_p"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        topP = null;
                        continue;
                    }
                    topP = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("user"u8))
                {
                    endUserId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("service_tier"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serviceTier = new ChatServiceTier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("messages"u8))
                {
                    List<ChatMessage> array = new List<ChatMessage>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(ChatMessage.DeserializeChatMessage(item, item.GetUtf8Bytes(), options));
                    }
                    messages = array;
                    continue;
                }
                if (prop.NameEquals("model"u8))
                {
                    model = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("modalities"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<InternalCreateChatCompletionRequestModality> array = new List<InternalCreateChatCompletionRequestModality>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(new InternalCreateChatCompletionRequestModality(item.GetString()));
                    }
                    internalModalities = array;
                    continue;
                }
                if (prop.NameEquals("reasoning_effort"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        reasoningEffortLevel = null;
                        continue;
                    }
                    reasoningEffortLevel = new ChatReasoningEffortLevel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("max_completion_tokens"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxOutputTokenCount = null;
                        continue;
                    }
                    maxOutputTokenCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("frequency_penalty"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        frequencyPenalty = null;
                        continue;
                    }
                    frequencyPenalty = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("presence_penalty"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        presencePenalty = null;
                        continue;
                    }
                    presencePenalty = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("web_search_options"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    webSearchOptions = ChatWebSearchOptions.DeserializeChatWebSearchOptions(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("top_logprobs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        topLogProbabilityCount = null;
                        continue;
                    }
                    topLogProbabilityCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("response_format"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    responseFormat = ChatResponseFormat.DeserializeChatResponseFormat(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("audio"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        audioOptions = null;
                        continue;
                    }
                    audioOptions = ChatAudioOptions.DeserializeChatAudioOptions(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("store"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        storedOutputEnabled = null;
                        continue;
                    }
                    storedOutputEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("stream"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        stream = null;
                        continue;
                    }
                    stream = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("stop"u8))
                {
                    DeserializeStopSequencesValue(prop, ref stopSequences);
                    continue;
                }
                if (prop.NameEquals("logit_bias"u8))
                {
                    DeserializeLogitBiasesValue(prop, ref logitBiases);
                    continue;
                }
                if (prop.NameEquals("logprobs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        includeLogProbabilities = null;
                        continue;
                    }
                    includeLogProbabilities = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("max_tokens"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        deprecatedMaxTokens = null;
                        continue;
                    }
                    deprecatedMaxTokens = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("n"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        n = null;
                        continue;
                    }
                    n = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("prediction"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        outputPrediction = null;
                        continue;
                    }
                    outputPrediction = ChatOutputPrediction.DeserializeChatOutputPrediction(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("seed"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        seed = null;
                        continue;
                    }
                    seed = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("stream_options"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        streamOptions = null;
                        continue;
                    }
                    streamOptions = InternalChatCompletionStreamOptions.DeserializeInternalChatCompletionStreamOptions(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("tools"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ChatTool> array = new List<ChatTool>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(ChatTool.DeserializeChatTool(item, item.GetUtf8Bytes(), options));
                    }
                    tools = array;
                    continue;
                }
                if (prop.NameEquals("tool_choice"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    toolChoice = ChatToolChoice.DeserializeChatToolChoice(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("parallel_tool_calls"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allowParallelToolCalls = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("function_call"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    functionChoice = ChatFunctionChoice.DeserializeChatFunctionChoice(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("functions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ChatFunction> array = new List<ChatFunction>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(ChatFunction.DeserializeChatFunction(item, item.GetUtf8Bytes(), options));
                    }
                    functions = array;
                    continue;
                }
                patch.Set([.. "$."u8, .. Encoding.UTF8.GetBytes(prop.Name)], prop.Value.GetUtf8Bytes());
            }
            return new ChatCompletionOptions(
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                temperature,
                topP,
                endUserId,
                serviceTier,
                messages,
                model,
                internalModalities ?? new ChangeTrackingList<InternalCreateChatCompletionRequestModality>(),
                reasoningEffortLevel,
                maxOutputTokenCount,
                frequencyPenalty,
                presencePenalty,
                webSearchOptions,
                topLogProbabilityCount,
                responseFormat,
                audioOptions,
                storedOutputEnabled,
                stream,
                stopSequences ?? new ChangeTrackingList<string>(),
                logitBiases ?? new ChangeTrackingDictionary<int, int>(),
                includeLogProbabilities,
                deprecatedMaxTokens,
                n,
                outputPrediction,
                seed,
                streamOptions,
                tools ?? new ChangeTrackingList<ChatTool>(),
                toolChoice,
                allowParallelToolCalls,
                functionChoice,
                functions ?? new ChangeTrackingList<ChatFunction>(),
                patch);
        }

        BinaryData IPersistableModel<ChatCompletionOptions>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        [Experimental("OPENAI001")]
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatCompletionOptions>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ChatCompletionOptions)} does not support writing '{options.Format}' format.");
            }
        }

        ChatCompletionOptions IPersistableModel<ChatCompletionOptions>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        [Experimental("OPENAI001")]
        protected virtual ChatCompletionOptions PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ChatCompletionOptions>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeChatCompletionOptions(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ChatCompletionOptions)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ChatCompletionOptions>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateGet(ReadOnlySpan<byte> jsonPath, out JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();
            value = default;

            if (local.StartsWith("web_search_options"u8))
            {
                return WebSearchOptions.Patch.TryGetEncodedValue([.. "$"u8, .. local.Slice("web_search_options"u8.Length)], out value);
            }
            if (local.StartsWith("tools"u8))
            {
                int propertyLength = "tools"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                return Tools[index].Patch.TryGetEncodedValue([.. "$"u8, .. currentSlice.Slice(bytesConsumed)], out value);
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateSet(ReadOnlySpan<byte> jsonPath, JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();

            if (local.StartsWith("web_search_options"u8))
            {
                WebSearchOptions.Patch.Set([.. "$"u8, .. local.Slice("web_search_options"u8.Length)], value);
                return true;
            }
            if (local.StartsWith("tools"u8))
            {
                int propertyLength = "tools"u8.Length;
                ReadOnlySpan<byte> currentSlice = local.Slice(propertyLength);
                if (!currentSlice.TryGetIndex(out int index, out int bytesConsumed))
                {
                    return false;
                }
                Tools[index].Patch.Set([.. "$"u8, .. currentSlice.Slice(bytesConsumed)], value);
                return true;
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
    }
}
