// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Evals
{
    internal readonly partial struct InternalEvalRunDataSourceType : IEquatable<InternalEvalRunDataSourceType>
    {
        private readonly string _value;
        private const string JsonlValue = "jsonl";
        private const string CompletionsValue = "completions";
        private const string ResponsesValue = "responses";

        public InternalEvalRunDataSourceType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalEvalRunDataSourceType Jsonl { get; } = new InternalEvalRunDataSourceType(JsonlValue);

        internal static InternalEvalRunDataSourceType Completions { get; } = new InternalEvalRunDataSourceType(CompletionsValue);

        internal static InternalEvalRunDataSourceType Responses { get; } = new InternalEvalRunDataSourceType(ResponsesValue);

        public static bool operator ==(InternalEvalRunDataSourceType left, InternalEvalRunDataSourceType right) => left.Equals(right);

        public static bool operator !=(InternalEvalRunDataSourceType left, InternalEvalRunDataSourceType right) => !left.Equals(right);

        public static implicit operator InternalEvalRunDataSourceType(string value) => new InternalEvalRunDataSourceType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalEvalRunDataSourceType other && Equals(other);

        public bool Equals(InternalEvalRunDataSourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
