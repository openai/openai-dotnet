// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Responses
{
    internal readonly partial struct InternalWebSearchPreviewToolSearchContextSize : IEquatable<InternalWebSearchPreviewToolSearchContextSize>
    {
        private readonly string _value;
        private const string LowValue = "low";
        private const string MediumValue = "medium";
        private const string HighValue = "high";

        public InternalWebSearchPreviewToolSearchContextSize(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalWebSearchPreviewToolSearchContextSize Low { get; } = new InternalWebSearchPreviewToolSearchContextSize(LowValue);

        internal static InternalWebSearchPreviewToolSearchContextSize Medium { get; } = new InternalWebSearchPreviewToolSearchContextSize(MediumValue);

        internal static InternalWebSearchPreviewToolSearchContextSize High { get; } = new InternalWebSearchPreviewToolSearchContextSize(HighValue);

        public static bool operator ==(InternalWebSearchPreviewToolSearchContextSize left, InternalWebSearchPreviewToolSearchContextSize right) => left.Equals(right);

        public static bool operator !=(InternalWebSearchPreviewToolSearchContextSize left, InternalWebSearchPreviewToolSearchContextSize right) => !left.Equals(right);

        public static implicit operator InternalWebSearchPreviewToolSearchContextSize(string value) => new InternalWebSearchPreviewToolSearchContextSize(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalWebSearchPreviewToolSearchContextSize other && Equals(other);

        public bool Equals(InternalWebSearchPreviewToolSearchContextSize other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
