// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Images
{
    internal readonly partial struct InternalCreateImageRequestModel : IEquatable<InternalCreateImageRequestModel>
    {
        private readonly string _value;
        private const string DallE2Value = "dall-e-2";
        private const string DallE3Value = "dall-e-3";
        private const string GptImage1Value = "gpt-image-1";

        public InternalCreateImageRequestModel(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalCreateImageRequestModel DallE2 { get; } = new InternalCreateImageRequestModel(DallE2Value);

        internal static InternalCreateImageRequestModel DallE3 { get; } = new InternalCreateImageRequestModel(DallE3Value);

        internal static InternalCreateImageRequestModel GptImage1 { get; } = new InternalCreateImageRequestModel(GptImage1Value);

        public static bool operator ==(InternalCreateImageRequestModel left, InternalCreateImageRequestModel right) => left.Equals(right);

        public static bool operator !=(InternalCreateImageRequestModel left, InternalCreateImageRequestModel right) => !left.Equals(right);

        public static implicit operator InternalCreateImageRequestModel(string value) => new InternalCreateImageRequestModel(value);

        public static implicit operator InternalCreateImageRequestModel?(string value) => value == null ? null : new InternalCreateImageRequestModel(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalCreateImageRequestModel other && Equals(other);

        public bool Equals(InternalCreateImageRequestModel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
