// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Graders
{
    internal readonly partial struct InternalGraderStringCheckOperation : IEquatable<InternalGraderStringCheckOperation>
    {
        private readonly string _value;
        private const string EqValue = "eq";
        private const string NeValue = "ne";
        private const string LikeValue = "like";
        private const string IlikeValue = "ilike";

        public InternalGraderStringCheckOperation(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalGraderStringCheckOperation Eq { get; } = new InternalGraderStringCheckOperation(EqValue);

        internal static InternalGraderStringCheckOperation Ne { get; } = new InternalGraderStringCheckOperation(NeValue);

        internal static InternalGraderStringCheckOperation Like { get; } = new InternalGraderStringCheckOperation(LikeValue);

        internal static InternalGraderStringCheckOperation Ilike { get; } = new InternalGraderStringCheckOperation(IlikeValue);

        public static bool operator ==(InternalGraderStringCheckOperation left, InternalGraderStringCheckOperation right) => left.Equals(right);

        public static bool operator !=(InternalGraderStringCheckOperation left, InternalGraderStringCheckOperation right) => !left.Equals(right);

        public static implicit operator InternalGraderStringCheckOperation(string value) => new InternalGraderStringCheckOperation(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalGraderStringCheckOperation other && Equals(other);

        public bool Equals(InternalGraderStringCheckOperation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
