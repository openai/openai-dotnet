// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Responses
{
    [Experimental("OPENAI001")]
    public readonly partial struct ImageGenerationToolOutputFormat : IEquatable<ImageGenerationToolOutputFormat>
    {
        private readonly string _value;
        private const string PngValue = "png";
        private const string WebpValue = "webp";
        private const string JpegValue = "jpeg";

        public ImageGenerationToolOutputFormat(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static ImageGenerationToolOutputFormat Png { get; } = new ImageGenerationToolOutputFormat(PngValue);

        public static ImageGenerationToolOutputFormat Webp { get; } = new ImageGenerationToolOutputFormat(WebpValue);

        public static ImageGenerationToolOutputFormat Jpeg { get; } = new ImageGenerationToolOutputFormat(JpegValue);

        public static bool operator ==(ImageGenerationToolOutputFormat left, ImageGenerationToolOutputFormat right) => left.Equals(right);

        public static bool operator !=(ImageGenerationToolOutputFormat left, ImageGenerationToolOutputFormat right) => !left.Equals(right);

        public static implicit operator ImageGenerationToolOutputFormat(string value) => new ImageGenerationToolOutputFormat(value);

        public static implicit operator ImageGenerationToolOutputFormat?(string value) => value == null ? null : new ImageGenerationToolOutputFormat(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageGenerationToolOutputFormat other && Equals(other);

        public bool Equals(ImageGenerationToolOutputFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
