// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Responses
{
    [Experimental("OPENAI001")]
    public readonly partial struct McpToolConnectorId : IEquatable<McpToolConnectorId>
    {
        private readonly string _value;
        private const string ConnectorDropboxValue = "connector_dropbox";
        private const string ConnectorGmailValue = "connector_gmail";
        private const string ConnectorGooglecalendarValue = "connector_googlecalendar";
        private const string ConnectorGoogledriveValue = "connector_googledrive";
        private const string ConnectorMicrosoftteamsValue = "connector_microsoftteams";
        private const string ConnectorOutlookcalendarValue = "connector_outlookcalendar";
        private const string ConnectorOutlookemailValue = "connector_outlookemail";
        private const string ConnectorSharepointValue = "connector_sharepoint";

        public McpToolConnectorId(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static bool operator ==(McpToolConnectorId left, McpToolConnectorId right) => left.Equals(right);

        public static bool operator !=(McpToolConnectorId left, McpToolConnectorId right) => !left.Equals(right);

        public static implicit operator McpToolConnectorId(string value) => new McpToolConnectorId(value);

        public static implicit operator McpToolConnectorId?(string value) => value == null ? null : new McpToolConnectorId(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is McpToolConnectorId other && Equals(other);

        public bool Equals(McpToolConnectorId other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
