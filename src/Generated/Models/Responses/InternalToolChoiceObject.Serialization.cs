// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    [PersistableModelProxy(typeof(InternalUnknownToolChoiceObject))]
    internal abstract partial class InternalToolChoiceObject : IJsonModel<InternalToolChoiceObject>
    {
        internal InternalToolChoiceObject()
        {
        }

        void IJsonModel<InternalToolChoiceObject>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalToolChoiceObject>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalToolChoiceObject)} does not support writing '{format}' format.");
            }
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (!Patch.Contains("$.type"u8))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Kind.ToString());
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        InternalToolChoiceObject IJsonModel<InternalToolChoiceObject>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        protected virtual InternalToolChoiceObject JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalToolChoiceObject>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalToolChoiceObject)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInternalToolChoiceObject(document.RootElement, null, options);
        }

        internal static InternalToolChoiceObject DeserializeInternalToolChoiceObject(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type"u8, out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "file_search":
                        return InternalToolChoiceObjectFileSearch.DeserializeInternalToolChoiceObjectFileSearch(element, data, options);
                    case "computer_use_preview":
                        return InternalToolChoiceObjectComputer.DeserializeInternalToolChoiceObjectComputer(element, data, options);
                    case "web_search_preview":
                        return InternalToolChoiceObjectWebSearch.DeserializeInternalToolChoiceObjectWebSearch(element, data, options);
                    case "image_generation":
                        return InternalToolChoiceObjectImageGen.DeserializeInternalToolChoiceObjectImageGen(element, data, options);
                    case "code_interpreter":
                        return InternalToolChoiceObjectCodeInterpreter.DeserializeInternalToolChoiceObjectCodeInterpreter(element, data, options);
                    case "mcp":
                        return InternalToolChoiceObjectMCP.DeserializeInternalToolChoiceObjectMCP(element, data, options);
                    case "function":
                        return InternalToolChoiceObjectFunction.DeserializeInternalToolChoiceObjectFunction(element, data, options);
                }
            }
            return InternalUnknownToolChoiceObject.DeserializeInternalUnknownToolChoiceObject(element, data, options);
        }

        BinaryData IPersistableModel<InternalToolChoiceObject>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalToolChoiceObject>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InternalToolChoiceObject)} does not support writing '{options.Format}' format.");
            }
        }

        InternalToolChoiceObject IPersistableModel<InternalToolChoiceObject>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        protected virtual InternalToolChoiceObject PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalToolChoiceObject>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeInternalToolChoiceObject(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InternalToolChoiceObject)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InternalToolChoiceObject>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
