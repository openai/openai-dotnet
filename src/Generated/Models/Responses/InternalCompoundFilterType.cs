// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Responses
{
    internal readonly partial struct InternalCompoundFilterType : IEquatable<InternalCompoundFilterType>
    {
        private readonly string _value;
        private const string AndValue = "and";
        private const string OrValue = "or";

        public InternalCompoundFilterType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalCompoundFilterType And { get; } = new InternalCompoundFilterType(AndValue);

        internal static InternalCompoundFilterType Or { get; } = new InternalCompoundFilterType(OrValue);

        public static bool operator ==(InternalCompoundFilterType left, InternalCompoundFilterType right) => left.Equals(right);

        public static bool operator !=(InternalCompoundFilterType left, InternalCompoundFilterType right) => !left.Equals(right);

        public static implicit operator InternalCompoundFilterType(string value) => new InternalCompoundFilterType(value);

        public static implicit operator InternalCompoundFilterType?(string value) => value == null ? null : new InternalCompoundFilterType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalCompoundFilterType other && Equals(other);

        public bool Equals(InternalCompoundFilterType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
