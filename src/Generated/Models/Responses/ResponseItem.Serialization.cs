// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    [PersistableModelProxy(typeof(InternalUnknownItemResource))]
    public partial class ResponseItem : IJsonModel<ResponseItem>
    {
        internal ResponseItem()
        {
        }

        void IJsonModel<ResponseItem>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ResponseItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResponseItem)} does not support writing '{format}' format.");
            }
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (!Patch.Contains("$.type"u8))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Kind.ToString());
            }
            // Plugin customization: remove options.Format != "W" check
            // Plugin customization: apply Optional.Is*Defined() check based on type name dictionary lookup
            if (Optional.IsDefined(Id) && !Patch.Contains("$.id"u8))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        ResponseItem IJsonModel<ResponseItem>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        protected virtual ResponseItem JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ResponseItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResponseItem)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResponseItem(document.RootElement, null, options);
        }

        internal static ResponseItem DeserializeResponseItem(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type"u8, out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "message":
                        return MessageResponseItem.DeserializeMessageResponseItem(element, data, options);
                    case "computer_call_output":
                        return ComputerCallOutputResponseItem.DeserializeComputerCallOutputResponseItem(element, data, options);
                    case "function_call":
                        return FunctionCallResponseItem.DeserializeFunctionCallResponseItem(element, data, options);
                    case "function_call_output":
                        return FunctionCallOutputResponseItem.DeserializeFunctionCallOutputResponseItem(element, data, options);
                    case "mcp_approval_response":
                        return McpToolCallApprovalResponseItem.DeserializeMcpToolCallApprovalResponseItem(element, data, options);
                    case "file_search_call":
                        return FileSearchCallResponseItem.DeserializeFileSearchCallResponseItem(element, data, options);
                    case "computer_call":
                        return ComputerCallResponseItem.DeserializeComputerCallResponseItem(element, data, options);
                    case "web_search_call":
                        return WebSearchCallResponseItem.DeserializeWebSearchCallResponseItem(element, data, options);
                    case "reasoning":
                        return ReasoningResponseItem.DeserializeReasoningResponseItem(element, data, options);
                    case "image_generation_call":
                        return ImageGenerationCallResponseItem.DeserializeImageGenerationCallResponseItem(element, data, options);
                    case "code_interpreter_call":
                        return CodeInterpreterCallResponseItem.DeserializeCodeInterpreterCallResponseItem(element, data, options);
                    case "local_shell_call":
                        return InternalLocalShellToolCallItemResource.DeserializeInternalLocalShellToolCallItemResource(element, data, options);
                    case "local_shell_call_output":
                        return InternalLocalShellToolCallOutputItemResource.DeserializeInternalLocalShellToolCallOutputItemResource(element, data, options);
                    case "mcp_list_tools":
                        return McpToolDefinitionListItem.DeserializeMcpToolDefinitionListItem(element, data, options);
                    case "mcp_approval_request":
                        return McpToolCallApprovalRequestItem.DeserializeMcpToolCallApprovalRequestItem(element, data, options);
                    case "mcp_call":
                        return McpToolCallItem.DeserializeMcpToolCallItem(element, data, options);
                    case "item_reference":
                        return ReferenceResponseItem.DeserializeReferenceResponseItem(element, data, options);
                }
            }
            return InternalUnknownItemResource.DeserializeInternalUnknownItemResource(element, data, options);
        }

        BinaryData IPersistableModel<ResponseItem>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ResponseItem>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ResponseItem)} does not support writing '{options.Format}' format.");
            }
        }

        ResponseItem IPersistableModel<ResponseItem>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        protected virtual ResponseItem PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ResponseItem>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeResponseItem(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResponseItem)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ResponseItem>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        public static explicit operator ResponseItem(ClientResult result)
        {
            using PipelineResponse response = result.GetRawResponse();
            BinaryData data = response.Content;
            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeResponseItem(document.RootElement, data, ModelSerializationExtensions.WireOptions);
        }
    }
}
