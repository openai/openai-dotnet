// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    public partial class FunctionTool : ResponseTool, IJsonModel<FunctionTool>
    {
        internal FunctionTool() : this(InternalToolType.Function, null, null, null, null, default)
        {
        }

        void IJsonModel<FunctionTool>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FunctionTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FunctionTool)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (_additionalBinaryDataProperties?.ContainsKey("name") != true)
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(FunctionName);
            }
            if (Optional.IsDefined(FunctionDescription) && _additionalBinaryDataProperties?.ContainsKey("description") != true)
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(FunctionDescription);
            }
            if (_additionalBinaryDataProperties?.ContainsKey("parameters") != true)
            {
                if (Optional.IsDefined(FunctionParameters))
                {
                    writer.WritePropertyName("parameters"u8);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(FunctionParameters);
#else
                    using (JsonDocument document = JsonDocument.Parse(FunctionParameters))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                else
                {
                    writer.WriteNull("parameters"u8);
                }
            }
            if (_additionalBinaryDataProperties?.ContainsKey("strict") != true)
            {
                if (Optional.IsDefined(StrictModeEnabled))
                {
                    writer.WritePropertyName("strict"u8);
                    writer.WriteBooleanValue(StrictModeEnabled.Value);
                }
                else
                {
                    writer.WriteNull("strict"u8);
                }
            }
        }

        FunctionTool IJsonModel<FunctionTool>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (FunctionTool)JsonModelCreateCore(ref reader, options);

        protected override ResponseTool JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FunctionTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FunctionTool)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFunctionTool(document.RootElement, options);
        }

        internal static FunctionTool DeserializeFunctionTool(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InternalToolType kind = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string functionName = default;
            string functionDescription = default;
            BinaryData functionParameters = default;
            bool? strictModeEnabled = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = new InternalToolType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("name"u8))
                {
                    functionName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("description"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        functionDescription = null;
                        continue;
                    }
                    functionDescription = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("parameters"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        functionParameters = null;
                        continue;
                    }
                    functionParameters = BinaryData.FromString(prop.Value.GetRawText());
                    continue;
                }
                if (prop.NameEquals("strict"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        strictModeEnabled = null;
                        continue;
                    }
                    strictModeEnabled = prop.Value.GetBoolean();
                    continue;
                }
                // Plugin customization: remove options.Format != "W" check
                additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
            }
            return new FunctionTool(
                kind,
                additionalBinaryDataProperties,
                functionName,
                functionDescription,
                functionParameters,
                strictModeEnabled);
        }

        BinaryData IPersistableModel<FunctionTool>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FunctionTool>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(FunctionTool)} does not support writing '{options.Format}' format.");
            }
        }

        FunctionTool IPersistableModel<FunctionTool>.Create(BinaryData data, ModelReaderWriterOptions options) => (FunctionTool)PersistableModelCreateCore(data, options);

        protected override ResponseTool PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FunctionTool>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeFunctionTool(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FunctionTool)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<FunctionTool>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
