// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    public partial class MCPToolCallApprovalResponseItem : IJsonModel<MCPToolCallApprovalResponseItem>
    {
        internal MCPToolCallApprovalResponseItem() : this(InternalItemType.McpApprovalResponse, null, null, null, default, null)
        {
        }

        void IJsonModel<MCPToolCallApprovalResponseItem>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MCPToolCallApprovalResponseItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MCPToolCallApprovalResponseItem)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (_additionalBinaryDataProperties?.ContainsKey("approval_request_id") != true)
            {
                writer.WritePropertyName("approval_request_id"u8);
                writer.WriteStringValue(ApprovalRequestId);
            }
            if (_additionalBinaryDataProperties?.ContainsKey("approve") != true)
            {
                writer.WritePropertyName("approve"u8);
                writer.WriteBooleanValue(Approved);
            }
            if (Optional.IsDefined(Reason) && _additionalBinaryDataProperties?.ContainsKey("reason") != true)
            {
                writer.WritePropertyName("reason"u8);
                writer.WriteStringValue(Reason);
            }
        }

        MCPToolCallApprovalResponseItem IJsonModel<MCPToolCallApprovalResponseItem>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (MCPToolCallApprovalResponseItem)JsonModelCreateCore(ref reader, options);

        protected override ResponseItem JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MCPToolCallApprovalResponseItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MCPToolCallApprovalResponseItem)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMCPToolCallApprovalResponseItem(document.RootElement, options);
        }

        internal static MCPToolCallApprovalResponseItem DeserializeMCPToolCallApprovalResponseItem(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InternalItemType kind = default;
            string id = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string approvalRequestId = default;
            bool approved = default;
            string reason = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = new InternalItemType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("id"u8))
                {
                    id = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("approval_request_id"u8))
                {
                    approvalRequestId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("approve"u8))
                {
                    approved = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("reason"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        reason = null;
                        continue;
                    }
                    reason = prop.Value.GetString();
                    continue;
                }
                // Plugin customization: remove options.Format != "W" check
                additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
            }
            return new MCPToolCallApprovalResponseItem(
                kind,
                id,
                additionalBinaryDataProperties,
                approvalRequestId,
                approved,
                reason);
        }

        BinaryData IPersistableModel<MCPToolCallApprovalResponseItem>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MCPToolCallApprovalResponseItem>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MCPToolCallApprovalResponseItem)} does not support writing '{options.Format}' format.");
            }
        }

        MCPToolCallApprovalResponseItem IPersistableModel<MCPToolCallApprovalResponseItem>.Create(BinaryData data, ModelReaderWriterOptions options) => (MCPToolCallApprovalResponseItem)PersistableModelCreateCore(data, options);

        protected override ResponseItem PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MCPToolCallApprovalResponseItem>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeMCPToolCallApprovalResponseItem(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MCPToolCallApprovalResponseItem)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MCPToolCallApprovalResponseItem>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
