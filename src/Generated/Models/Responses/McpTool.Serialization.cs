// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    public partial class McpTool : ResponseTool, IJsonModel<McpTool>
    {
        internal McpTool() : this(InternalToolType.Mcp, default, null, null, default, null, null, null, null, null)
        {
        }

        void IJsonModel<McpTool>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<McpTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(McpTool)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (!Patch.Contains("$.server_label"u8))
            {
                writer.WritePropertyName("server_label"u8);
                writer.WriteStringValue(ServerLabel);
            }
            if (Optional.IsDefined(ServerUri) && !Patch.Contains("$.server_url"u8))
            {
                writer.WritePropertyName("server_url"u8);
                writer.WriteStringValue(ServerUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ConnectorId) && !Patch.Contains("$.connector_id"u8))
            {
                writer.WritePropertyName("connector_id"u8);
                writer.WriteStringValue(ConnectorId.Value.ToString());
            }
            if (Optional.IsDefined(AuthorizationToken) && !Patch.Contains("$.authorization"u8))
            {
                writer.WritePropertyName("authorization"u8);
                writer.WriteStringValue(AuthorizationToken);
            }
            if (Optional.IsDefined(ServerDescription) && !Patch.Contains("$.server_description"u8))
            {
                writer.WritePropertyName("server_description"u8);
                writer.WriteStringValue(ServerDescription);
            }
            if (Optional.IsCollectionDefined(Headers) && !Patch.Contains("$.headers"u8))
            {
                writer.WritePropertyName("headers"u8);
                writer.WriteStartObject();
#if NET8_0_OR_GREATER
                global::System.Span<byte> buffer = stackalloc byte[256];
#endif
                foreach (var item in Headers)
                {
#if NET8_0_OR_GREATER
                    int bytesWritten = global::System.Text.Encoding.UTF8.GetBytes(item.Key.AsSpan(), buffer);
                    bool patchContains = (bytesWritten == 256) ? Patch.Contains("$.headers"u8, global::System.Text.Encoding.UTF8.GetBytes(item.Key)) : Patch.Contains("$.headers"u8, buffer.Slice(0, bytesWritten));
#else
                    bool patchContains = Patch.Contains("$.headers"u8, Encoding.UTF8.GetBytes(item.Key));
#endif
                    if (!patchContains)
                    {
                        writer.WritePropertyName(item.Key);
                        if (item.Value == null)
                        {
                            writer.WriteNullValue();
                            continue;
                        }
                        writer.WriteStringValue(item.Value);
                    }
                }

                Patch.WriteTo(writer, "$.headers"u8);
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(AllowedTools) && !Patch.Contains("$.allowed_tools"u8))
            {
                writer.WritePropertyName("allowed_tools"u8);
                writer.WriteObjectValue(AllowedTools, options);
            }
            if (Optional.IsDefined(ToolCallApprovalPolicy) && !Patch.Contains("$.require_approval"u8))
            {
                writer.WritePropertyName("require_approval"u8);
                writer.WriteObjectValue(ToolCallApprovalPolicy, options);
            }

            Patch.WriteTo(writer);
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        McpTool IJsonModel<McpTool>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (McpTool)JsonModelCreateCore(ref reader, options);

        protected override ResponseTool JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<McpTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(McpTool)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMcpTool(document.RootElement, null, options);
        }

        internal static McpTool DeserializeMcpTool(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InternalToolType kind = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            JsonPatch patch = new JsonPatch(data is null ? ReadOnlyMemory<byte>.Empty : data.ToMemory());
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            string serverLabel = default;
            Uri serverUri = default;
            McpToolConnectorId? connectorId = default;
            string authorizationToken = default;
            string serverDescription = default;
            IDictionary<string, string> headers = default;
            McpToolFilter allowedTools = default;
            McpToolCallApprovalPolicy toolCallApprovalPolicy = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = new InternalToolType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("server_label"u8))
                {
                    serverLabel = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("server_url"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serverUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("connector_id"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectorId = new McpToolConnectorId(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("authorization"u8))
                {
                    authorizationToken = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("server_description"u8))
                {
                    serverDescription = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("headers"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetString());
                        }
                    }
                    headers = dictionary;
                    continue;
                }
                if (prop.NameEquals("allowed_tools"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        allowedTools = null;
                        continue;
                    }
                    allowedTools = McpToolFilter.DeserializeMcpToolFilter(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("require_approval"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        toolCallApprovalPolicy = null;
                        continue;
                    }
                    toolCallApprovalPolicy = McpToolCallApprovalPolicy.DeserializeMcpToolCallApprovalPolicy(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                patch.Set([.. "$."u8, .. Encoding.UTF8.GetBytes(prop.Name)], prop.Value.GetUtf8Bytes());
            }
            return new McpTool(
                kind,
                patch,
                serverLabel,
                serverUri,
                connectorId,
                authorizationToken,
                serverDescription,
                headers ?? new ChangeTrackingDictionary<string, string>(),
                allowedTools,
                toolCallApprovalPolicy);
        }

        BinaryData IPersistableModel<McpTool>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<McpTool>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(McpTool)} does not support writing '{options.Format}' format.");
            }
        }

        McpTool IPersistableModel<McpTool>.Create(BinaryData data, ModelReaderWriterOptions options) => (McpTool)PersistableModelCreateCore(data, options);

        protected override ResponseTool PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<McpTool>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeMcpTool(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(McpTool)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<McpTool>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateGet(ReadOnlySpan<byte> jsonPath, out JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();
            value = default;

            if (local.StartsWith("allowed_tools"u8))
            {
                return AllowedTools.Patch.TryGetEncodedValue([.. "$"u8, .. local.Slice("allowed_tools"u8.Length)], out value);
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateSet(ReadOnlySpan<byte> jsonPath, JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();

            if (local.StartsWith("allowed_tools"u8))
            {
                AllowedTools.Patch.Set([.. "$"u8, .. local.Slice("allowed_tools"u8.Length)], value);
                return true;
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
    }
}
