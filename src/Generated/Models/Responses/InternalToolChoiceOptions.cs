// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Responses
{
    internal readonly partial struct InternalToolChoiceOptions : IEquatable<InternalToolChoiceOptions>
    {
        private readonly string _value;
        private const string NoneValue = "none";
        private const string AutoValue = "auto";
        private const string RequiredValue = "required";

        public InternalToolChoiceOptions(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalToolChoiceOptions None { get; } = new InternalToolChoiceOptions(NoneValue);

        internal static InternalToolChoiceOptions Auto { get; } = new InternalToolChoiceOptions(AutoValue);

        internal static InternalToolChoiceOptions Required { get; } = new InternalToolChoiceOptions(RequiredValue);

        public static bool operator ==(InternalToolChoiceOptions left, InternalToolChoiceOptions right) => left.Equals(right);

        public static bool operator !=(InternalToolChoiceOptions left, InternalToolChoiceOptions right) => !left.Equals(right);

        public static implicit operator InternalToolChoiceOptions(string value) => new InternalToolChoiceOptions(value);

        public static implicit operator InternalToolChoiceOptions?(string value) => value == null ? null : new InternalToolChoiceOptions(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalToolChoiceOptions other && Equals(other);

        public bool Equals(InternalToolChoiceOptions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
