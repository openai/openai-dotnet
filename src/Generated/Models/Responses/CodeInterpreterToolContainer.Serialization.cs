// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    public partial class CodeInterpreterToolContainer : IJsonModel<CodeInterpreterToolContainer>
    {
        CodeInterpreterToolContainer IJsonModel<CodeInterpreterToolContainer>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        protected virtual CodeInterpreterToolContainer JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CodeInterpreterToolContainer>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CodeInterpreterToolContainer)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCodeInterpreterToolContainer(document.RootElement, null, options);
        }

        internal static CodeInterpreterToolContainer DeserializeCodeInterpreterToolContainer(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string containerId = default;
            CodeInterpreterToolContainerConfiguration containerConfiguration = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            JsonPatch patch = new JsonPatch(data is null ? ReadOnlyMemory<byte>.Empty : data.ToMemory());
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("container_id"u8))
                {
                    containerId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("container"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    containerConfiguration = CodeInterpreterToolContainerConfiguration.DeserializeCodeInterpreterToolContainerConfiguration(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                patch.Set([.. "$."u8, .. Encoding.UTF8.GetBytes(prop.Name)], prop.Value.GetUtf8Bytes());
            }
            return new CodeInterpreterToolContainer(containerId, containerConfiguration, patch);
        }

        BinaryData IPersistableModel<CodeInterpreterToolContainer>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CodeInterpreterToolContainer>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(CodeInterpreterToolContainer)} does not support writing '{options.Format}' format.");
            }
        }

        CodeInterpreterToolContainer IPersistableModel<CodeInterpreterToolContainer>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        protected virtual CodeInterpreterToolContainer PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CodeInterpreterToolContainer>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeCodeInterpreterToolContainer(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CodeInterpreterToolContainer)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CodeInterpreterToolContainer>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
