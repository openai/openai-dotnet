// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Responses
{
    [Experimental("OPENAI001")]
    public readonly partial struct ImageGenerationToolSize : IEquatable<ImageGenerationToolSize>
    {
        private readonly string _value;
        private const string _1024x1024Value = "1024x1024";
        private const string _1024x1536Value = "1024x1536";
        private const string _1536x1024Value = "1536x1024";
        private const string AutoValue = "auto";

        public ImageGenerationToolSize(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static ImageGenerationToolSize _1024x1024 { get; } = new ImageGenerationToolSize(_1024x1024Value);

        public static ImageGenerationToolSize _1024x1536 { get; } = new ImageGenerationToolSize(_1024x1536Value);

        public static ImageGenerationToolSize _1536x1024 { get; } = new ImageGenerationToolSize(_1536x1024Value);

        public static ImageGenerationToolSize Auto { get; } = new ImageGenerationToolSize(AutoValue);

        public static bool operator ==(ImageGenerationToolSize left, ImageGenerationToolSize right) => left.Equals(right);

        public static bool operator !=(ImageGenerationToolSize left, ImageGenerationToolSize right) => !left.Equals(right);

        public static implicit operator ImageGenerationToolSize(string value) => new ImageGenerationToolSize(value);

        public static implicit operator ImageGenerationToolSize?(string value) => value == null ? null : new ImageGenerationToolSize(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageGenerationToolSize other && Equals(other);

        public bool Equals(ImageGenerationToolSize other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
