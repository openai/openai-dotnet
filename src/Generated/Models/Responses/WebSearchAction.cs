// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
  [Experimental("OPENAI001")]
  public partial class WebSearchAction : IJsonModel<WebSearchAction>
  {
    public WebSearchAction()
    {
    }

    internal WebSearchAction(string type, string query, IReadOnlyList<WebSearchSource> sources)
    {
      Type = type;
      Query = query;
      Sources = sources;
    }

    public string Type { get; }
    public string Query { get; }
    public IReadOnlyList<WebSearchSource> Sources { get; }

    void IJsonModel<WebSearchAction>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
      writer.WriteStartObject();
      JsonModelWriteCore(writer, options);
      writer.WriteEndObject();
    }

    protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
      string format = options.Format == "W" ? ((IPersistableModel<WebSearchAction>)this).GetFormatFromOptions(options) : options.Format;
      if (format != "J")
      {
        throw new FormatException($"The model {nameof(WebSearchAction)} does not support writing '{format}' format.");
      }

      if (Type != null)
      {
        writer.WritePropertyName("type"u8);
        writer.WriteStringValue(Type);
      }

      if (Query != null)
      {
        writer.WritePropertyName("query"u8);
        writer.WriteStringValue(Query);
      }

      if (Sources != null)
      {
        writer.WritePropertyName("sources"u8);
        writer.WriteStartArray();
        foreach (var item in Sources)
        {
          writer.WriteObjectValue(item, options);
        }
        writer.WriteEndArray();
      }
    }

    WebSearchAction IJsonModel<WebSearchAction>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

    protected virtual WebSearchAction JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
    {
      string format = options.Format == "W" ? ((IPersistableModel<WebSearchAction>)this).GetFormatFromOptions(options) : options.Format;
      if (format != "J")
      {
        throw new FormatException($"The model {nameof(WebSearchAction)} does not support reading '{format}' format.");
      }
      using JsonDocument document = JsonDocument.ParseValue(ref reader);
      return DeserializeWebSearchAction(document.RootElement, options);
    }

    internal static WebSearchAction DeserializeWebSearchAction(JsonElement element, ModelReaderWriterOptions options)
    {
      if (element.ValueKind == JsonValueKind.Null)
      {
        return null;
      }

      string type = default;
      string query = default;
      IReadOnlyList<WebSearchSource> sources = default;

      foreach (var prop in element.EnumerateObject())
      {
        if (prop.NameEquals("type"u8))
        {
          type = prop.Value.GetString();
          continue;
        }
        if (prop.NameEquals("query"u8))
        {
          query = prop.Value.GetString();
          continue;
        }
        if (prop.NameEquals("sources"u8))
        {
          if (prop.Value.ValueKind == JsonValueKind.Null)
          {
            continue;
          }
          List<WebSearchSource> array = new List<WebSearchSource>();
          foreach (var item in prop.Value.EnumerateArray())
          {
            array.Add(WebSearchSource.DeserializeWebSearchSource(item, options));
          }
          sources = array;
          continue;
        }
      }

      return new WebSearchAction(type, query, sources ?? new List<WebSearchSource>());
    }

    BinaryData IPersistableModel<WebSearchAction>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

    protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
    {
      string format = options.Format == "W" ? ((IPersistableModel<WebSearchAction>)this).GetFormatFromOptions(options) : options.Format;
      switch (format)
      {
        case "J":
          return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
        default:
          throw new FormatException($"The model {nameof(WebSearchAction)} does not support writing '{options.Format}' format.");
      }
    }

    WebSearchAction IPersistableModel<WebSearchAction>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

    protected virtual WebSearchAction PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
    {
      string format = options.Format == "W" ? ((IPersistableModel<WebSearchAction>)this).GetFormatFromOptions(options) : options.Format;
      switch (format)
      {
        case "J":
          using (JsonDocument document = JsonDocument.Parse(data))
          {
            return DeserializeWebSearchAction(document.RootElement, options);
          }
        default:
          throw new FormatException($"The model {nameof(WebSearchAction)} does not support reading '{options.Format}' format.");
      }
    }

    string IPersistableModel<WebSearchAction>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
  }
}