// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    internal partial class InternalComputerActionKeyPress : ComputerCallAction, IJsonModel<InternalComputerActionKeyPress>
    {
        internal InternalComputerActionKeyPress() : this(ComputerCallActionKind.KeyPress, default, null)
        {
        }

        void IJsonModel<InternalComputerActionKeyPress>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalComputerActionKeyPress>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalComputerActionKeyPress)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$.keys"u8))
            {
                if (!Patch.IsRemoved("$.keys"u8))
                {
                    writer.WritePropertyName("keys"u8);
                    writer.WriteRawValue(Patch.GetJson("$.keys"u8));
                }
            }
            else
            {
                writer.WritePropertyName("keys"u8);
                writer.WriteStartArray();
                for (int i = 0; i < Keys.Count; i++)
                {
                    if (Patch.IsRemoved(Encoding.UTF8.GetBytes($"$.keys[{i}]")))
                    {
                        continue;
                    }
                    if (Keys[i] == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(Keys[i]);
                }
                Patch.WriteTo(writer, "$.keys"u8);
                writer.WriteEndArray();
            }

            Patch.WriteTo(writer);
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        InternalComputerActionKeyPress IJsonModel<InternalComputerActionKeyPress>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (InternalComputerActionKeyPress)JsonModelCreateCore(ref reader, options);

        protected override ComputerCallAction JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalComputerActionKeyPress>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalComputerActionKeyPress)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInternalComputerActionKeyPress(document.RootElement, null, options);
        }

        internal static InternalComputerActionKeyPress DeserializeInternalComputerActionKeyPress(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ComputerCallActionKind kind = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            JsonPatch patch = new JsonPatch(data is null ? ReadOnlyMemory<byte>.Empty : data.ToMemory());
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            IList<string> keys = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = prop.Value.GetString().ToComputerCallActionKind();
                    continue;
                }
                if (prop.NameEquals("keys"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    keys = array;
                    continue;
                }
                patch.Set([.. "$."u8, .. Encoding.UTF8.GetBytes(prop.Name)], prop.Value.GetUtf8Bytes());
            }
            return new InternalComputerActionKeyPress(kind, patch, keys);
        }

        BinaryData IPersistableModel<InternalComputerActionKeyPress>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalComputerActionKeyPress>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InternalComputerActionKeyPress)} does not support writing '{options.Format}' format.");
            }
        }

        InternalComputerActionKeyPress IPersistableModel<InternalComputerActionKeyPress>.Create(BinaryData data, ModelReaderWriterOptions options) => (InternalComputerActionKeyPress)PersistableModelCreateCore(data, options);

        protected override ComputerCallAction PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalComputerActionKeyPress>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeInternalComputerActionKeyPress(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InternalComputerActionKeyPress)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InternalComputerActionKeyPress>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
