// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    public partial class MCPToolDefinitionListItem : IJsonModel<MCPToolDefinitionListItem>
    {
        internal MCPToolDefinitionListItem() : this(InternalItemType.McpListTools, null, null, null, null, null)
        {
        }

        void IJsonModel<MCPToolDefinitionListItem>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MCPToolDefinitionListItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MCPToolDefinitionListItem)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (_additionalBinaryDataProperties?.ContainsKey("server_label") != true)
            {
                writer.WritePropertyName("server_label"u8);
                writer.WriteStringValue(ServerLabel);
            }
            if (_additionalBinaryDataProperties?.ContainsKey("tools") != true)
            {
                writer.WritePropertyName("tools"u8);
                writer.WriteStartArray();
                foreach (MCPToolDefinition item in ToolDefinitions)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Error) && _additionalBinaryDataProperties?.ContainsKey("error") != true)
            {
                writer.WritePropertyName("error"u8);
#if NET6_0_OR_GREATER
                writer.WriteRawValue(Error);
#else
                using (JsonDocument document = JsonDocument.Parse(Error))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
        }

        MCPToolDefinitionListItem IJsonModel<MCPToolDefinitionListItem>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (MCPToolDefinitionListItem)JsonModelCreateCore(ref reader, options);

        protected override ResponseItem JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MCPToolDefinitionListItem>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MCPToolDefinitionListItem)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMCPToolDefinitionListItem(document.RootElement, options);
        }

        internal static MCPToolDefinitionListItem DeserializeMCPToolDefinitionListItem(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InternalItemType kind = default;
            string id = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string serverLabel = default;
            IList<MCPToolDefinition> toolDefinitions = default;
            BinaryData error = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = new InternalItemType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("id"u8))
                {
                    id = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("server_label"u8))
                {
                    serverLabel = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("tools"u8))
                {
                    List<MCPToolDefinition> array = new List<MCPToolDefinition>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(MCPToolDefinition.DeserializeMCPToolDefinition(item, options));
                    }
                    toolDefinitions = array;
                    continue;
                }
                if (prop.NameEquals("error"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = BinaryData.FromString(prop.Value.GetRawText());
                    continue;
                }
                // Plugin customization: remove options.Format != "W" check
                additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
            }
            return new MCPToolDefinitionListItem(
                kind,
                id,
                additionalBinaryDataProperties,
                serverLabel,
                toolDefinitions,
                error);
        }

        BinaryData IPersistableModel<MCPToolDefinitionListItem>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MCPToolDefinitionListItem>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MCPToolDefinitionListItem)} does not support writing '{options.Format}' format.");
            }
        }

        MCPToolDefinitionListItem IPersistableModel<MCPToolDefinitionListItem>.Create(BinaryData data, ModelReaderWriterOptions options) => (MCPToolDefinitionListItem)PersistableModelCreateCore(data, options);

        protected override ResponseItem PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MCPToolDefinitionListItem>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeMCPToolDefinitionListItem(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MCPToolDefinitionListItem)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MCPToolDefinitionListItem>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
