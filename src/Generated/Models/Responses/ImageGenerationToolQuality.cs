// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Responses
{
    [Experimental("OPENAI001")]
    public readonly partial struct ImageGenerationToolQuality : IEquatable<ImageGenerationToolQuality>
    {
        private readonly string _value;
        private const string LowValue = "low";
        private const string MediumValue = "medium";
        private const string HighValue = "high";
        private const string AutoValue = "auto";

        public ImageGenerationToolQuality(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static ImageGenerationToolQuality Low { get; } = new ImageGenerationToolQuality(LowValue);

        public static ImageGenerationToolQuality Medium { get; } = new ImageGenerationToolQuality(MediumValue);

        public static ImageGenerationToolQuality High { get; } = new ImageGenerationToolQuality(HighValue);

        public static ImageGenerationToolQuality Auto { get; } = new ImageGenerationToolQuality(AutoValue);

        public static bool operator ==(ImageGenerationToolQuality left, ImageGenerationToolQuality right) => left.Equals(right);

        public static bool operator !=(ImageGenerationToolQuality left, ImageGenerationToolQuality right) => !left.Equals(right);

        public static implicit operator ImageGenerationToolQuality(string value) => new ImageGenerationToolQuality(value);

        public static implicit operator ImageGenerationToolQuality?(string value) => value == null ? null : new ImageGenerationToolQuality(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImageGenerationToolQuality other && Equals(other);

        public bool Equals(ImageGenerationToolQuality other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
