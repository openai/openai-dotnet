// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
  [Experimental("OPENAI001")]
  public partial class WebSearchSource : IJsonModel<WebSearchSource>
  {
    public WebSearchSource()
    {
    }

    internal WebSearchSource(string type, string url)
    {
      Type = type;
      Url = url;
    }

    public string Type { get; }
    public string Url { get; }

    void IJsonModel<WebSearchSource>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
      writer.WriteStartObject();
      JsonModelWriteCore(writer, options);
      writer.WriteEndObject();
    }

    protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
      string format = options.Format == "W" ? ((IPersistableModel<WebSearchSource>)this).GetFormatFromOptions(options) : options.Format;
      if (format != "J")
      {
        throw new FormatException($"The model {nameof(WebSearchSource)} does not support writing '{format}' format.");
      }

      if (Type != null)
      {
        writer.WritePropertyName("type"u8);
        writer.WriteStringValue(Type);
      }

      if (Url != null)
      {
        writer.WritePropertyName("url"u8);
        writer.WriteStringValue(Url);
      }
    }

    WebSearchSource IJsonModel<WebSearchSource>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

    protected virtual WebSearchSource JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
    {
      string format = options.Format == "W" ? ((IPersistableModel<WebSearchSource>)this).GetFormatFromOptions(options) : options.Format;
      if (format != "J")
      {
        throw new FormatException($"The model {nameof(WebSearchSource)} does not support reading '{format}' format.");
      }
      using JsonDocument document = JsonDocument.ParseValue(ref reader);
      return DeserializeWebSearchSource(document.RootElement, options);
    }

    internal static WebSearchSource DeserializeWebSearchSource(JsonElement element, ModelReaderWriterOptions options)
    {
      if (element.ValueKind == JsonValueKind.Null)
      {
        return null;
      }

      string type = default;
      string url = default;

      foreach (var prop in element.EnumerateObject())
      {
        if (prop.NameEquals("type"u8))
        {
          type = prop.Value.GetString();
          continue;
        }
        if (prop.NameEquals("url"u8))
        {
          url = prop.Value.GetString();
          continue;
        }
      }

      return new WebSearchSource(type, url);
    }

    BinaryData IPersistableModel<WebSearchSource>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

    protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
    {
      string format = options.Format == "W" ? ((IPersistableModel<WebSearchSource>)this).GetFormatFromOptions(options) : options.Format;
      switch (format)
      {
        case "J":
          return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
        default:
          throw new FormatException($"The model {nameof(WebSearchSource)} does not support writing '{options.Format}' format.");
      }
    }

    WebSearchSource IPersistableModel<WebSearchSource>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

    protected virtual WebSearchSource PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
    {
      string format = options.Format == "W" ? ((IPersistableModel<WebSearchSource>)this).GetFormatFromOptions(options) : options.Format;
      switch (format)
      {
        case "J":
          using (JsonDocument document = JsonDocument.Parse(data))
          {
            return DeserializeWebSearchSource(document.RootElement, options);
          }
        default:
          throw new FormatException($"The model {nameof(WebSearchSource)} does not support reading '{options.Format}' format.");
      }
    }

    string IPersistableModel<WebSearchSource>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
  }
}