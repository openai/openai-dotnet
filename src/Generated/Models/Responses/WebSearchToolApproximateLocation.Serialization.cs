// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    public partial class WebSearchToolApproximateLocation : WebSearchToolLocation, IJsonModel<WebSearchToolApproximateLocation>
    {
        void IJsonModel<WebSearchToolApproximateLocation>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<WebSearchToolApproximateLocation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WebSearchToolApproximateLocation)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Optional.IsDefined(Country) && !Patch.Contains("$.country"u8))
            {
                writer.WritePropertyName("country"u8);
                writer.WriteStringValue(Country);
            }
            if (Optional.IsDefined(Region) && !Patch.Contains("$.region"u8))
            {
                writer.WritePropertyName("region"u8);
                writer.WriteStringValue(Region);
            }
            if (Optional.IsDefined(City) && !Patch.Contains("$.city"u8))
            {
                writer.WritePropertyName("city"u8);
                writer.WriteStringValue(City);
            }
            if (Optional.IsDefined(Timezone) && !Patch.Contains("$.timezone"u8))
            {
                writer.WritePropertyName("timezone"u8);
                writer.WriteStringValue(Timezone);
            }

            Patch.WriteTo(writer);
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        WebSearchToolApproximateLocation IJsonModel<WebSearchToolApproximateLocation>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (WebSearchToolApproximateLocation)JsonModelCreateCore(ref reader, options);

        protected override WebSearchToolLocation JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<WebSearchToolApproximateLocation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WebSearchToolApproximateLocation)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeWebSearchToolApproximateLocation(document.RootElement, null, options);
        }

        internal static WebSearchToolApproximateLocation DeserializeWebSearchToolApproximateLocation(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InternalWebSearchUserLocationKind kind = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            JsonPatch patch = new JsonPatch(data is null ? ReadOnlyMemory<byte>.Empty : data.ToMemory());
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            string country = default;
            string region = default;
            string city = default;
            string timezone = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = new InternalWebSearchUserLocationKind(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("country"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        country = null;
                        continue;
                    }
                    country = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("region"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        region = null;
                        continue;
                    }
                    region = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("city"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        city = null;
                        continue;
                    }
                    city = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("timezone"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        timezone = null;
                        continue;
                    }
                    timezone = prop.Value.GetString();
                    continue;
                }
                patch.Set([.. "$."u8, .. Encoding.UTF8.GetBytes(prop.Name)], prop.Value.GetUtf8Bytes());
            }
            return new WebSearchToolApproximateLocation(
                kind,
                patch,
                country,
                region,
                city,
                timezone);
        }

        BinaryData IPersistableModel<WebSearchToolApproximateLocation>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<WebSearchToolApproximateLocation>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(WebSearchToolApproximateLocation)} does not support writing '{options.Format}' format.");
            }
        }

        WebSearchToolApproximateLocation IPersistableModel<WebSearchToolApproximateLocation>.Create(BinaryData data, ModelReaderWriterOptions options) => (WebSearchToolApproximateLocation)PersistableModelCreateCore(data, options);

        protected override WebSearchToolLocation PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<WebSearchToolApproximateLocation>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeWebSearchToolApproximateLocation(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(WebSearchToolApproximateLocation)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<WebSearchToolApproximateLocation>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
