// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    public partial class ImageGenerationTool : ResponseTool, IJsonModel<ImageGenerationTool>
    {
        void IJsonModel<ImageGenerationTool>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageGenerationTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageGenerationTool)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Optional.IsDefined(Model) && !Patch.Contains("$.model"u8))
            {
                writer.WritePropertyName("model"u8);
                writer.WriteStringValue(Model);
            }
            if (Optional.IsDefined(Quality) && !Patch.Contains("$.quality"u8))
            {
                writer.WritePropertyName("quality"u8);
                writer.WriteStringValue(Quality.Value.ToString());
            }
            if (Optional.IsDefined(Size) && !Patch.Contains("$.size"u8))
            {
                writer.WritePropertyName("size"u8);
                writer.WriteStringValue(Size.Value.ToString());
            }
            if (Optional.IsDefined(OutputFileFormat) && !Patch.Contains("$.output_format"u8))
            {
                writer.WritePropertyName("output_format"u8);
                writer.WriteStringValue(OutputFileFormat.Value.ToString());
            }
            if (Optional.IsDefined(OutputCompressionFactor) && !Patch.Contains("$.output_compression"u8))
            {
                writer.WritePropertyName("output_compression"u8);
                writer.WriteNumberValue(OutputCompressionFactor.Value);
            }
            if (Optional.IsDefined(ModerationLevel) && !Patch.Contains("$.moderation"u8))
            {
                writer.WritePropertyName("moderation"u8);
                writer.WriteStringValue(ModerationLevel.Value.ToString());
            }
            if (Optional.IsDefined(Background) && !Patch.Contains("$.background"u8))
            {
                writer.WritePropertyName("background"u8);
                writer.WriteStringValue(Background.Value.ToString());
            }
            if (Optional.IsDefined(InputFidelityLevel) && !Patch.Contains("$.input_fidelity"u8))
            {
                writer.WritePropertyName("input_fidelity"u8);
                writer.WriteStringValue(InputFidelityLevel.Value.ToString());
            }
            if (Optional.IsDefined(InputImageMask) && !Patch.Contains("$.input_image_mask"u8))
            {
                writer.WritePropertyName("input_image_mask"u8);
                writer.WriteObjectValue(InputImageMask, options);
            }
            if (Optional.IsDefined(PartialImageCount) && !Patch.Contains("$.partial_images"u8))
            {
                writer.WritePropertyName("partial_images"u8);
                writer.WriteNumberValue(PartialImageCount.Value);
            }

            Patch.WriteTo(writer);
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        ImageGenerationTool IJsonModel<ImageGenerationTool>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (ImageGenerationTool)JsonModelCreateCore(ref reader, options);

        protected override ResponseTool JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageGenerationTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageGenerationTool)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeImageGenerationTool(document.RootElement, null, options);
        }

        internal static ImageGenerationTool DeserializeImageGenerationTool(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InternalToolType kind = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            JsonPatch patch = new JsonPatch(data is null ? ReadOnlyMemory<byte>.Empty : data.ToMemory());
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            string model = default;
            ImageGenerationToolQuality? quality = default;
            ImageGenerationToolSize? size = default;
            ImageGenerationToolOutputFileFormat? outputFileFormat = default;
            int? outputCompressionFactor = default;
            ImageGenerationToolModerationLevel? moderationLevel = default;
            ImageGenerationToolBackground? background = default;
            ImageGenerationToolInputFidelityLevel? inputFidelityLevel = default;
            ImageGenerationToolInputImageMask inputImageMask = default;
            int? partialImageCount = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = new InternalToolType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("model"u8))
                {
                    model = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("quality"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    quality = new ImageGenerationToolQuality(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("size"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    size = new ImageGenerationToolSize(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("output_format"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    outputFileFormat = new ImageGenerationToolOutputFileFormat(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("output_compression"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    outputCompressionFactor = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("moderation"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    moderationLevel = new ImageGenerationToolModerationLevel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("background"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    background = new ImageGenerationToolBackground(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("input_fidelity"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputFidelityLevel = new ImageGenerationToolInputFidelityLevel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("input_image_mask"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inputImageMask = ImageGenerationToolInputImageMask.DeserializeImageGenerationToolInputImageMask(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("partial_images"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    partialImageCount = prop.Value.GetInt32();
                    continue;
                }
                patch.Set([.. "$."u8, .. Encoding.UTF8.GetBytes(prop.Name)], prop.Value.GetUtf8Bytes());
            }
            return new ImageGenerationTool(
                kind,
                patch,
                model,
                quality,
                size,
                outputFileFormat,
                outputCompressionFactor,
                moderationLevel,
                background,
                inputFidelityLevel,
                inputImageMask,
                partialImageCount);
        }

        BinaryData IPersistableModel<ImageGenerationTool>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageGenerationTool>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ImageGenerationTool)} does not support writing '{options.Format}' format.");
            }
        }

        ImageGenerationTool IPersistableModel<ImageGenerationTool>.Create(BinaryData data, ModelReaderWriterOptions options) => (ImageGenerationTool)PersistableModelCreateCore(data, options);

        protected override ResponseTool PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ImageGenerationTool>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeImageGenerationTool(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ImageGenerationTool)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ImageGenerationTool>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateGet(ReadOnlySpan<byte> jsonPath, out JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();
            value = default;

            if (local.StartsWith("input_image_mask"u8))
            {
                return InputImageMask.Patch.TryGetEncodedValue([.. "$"u8, .. local.Slice("input_image_mask"u8.Length)], out value);
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateSet(ReadOnlySpan<byte> jsonPath, JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();

            if (local.StartsWith("input_image_mask"u8))
            {
                InputImageMask.Patch.Set([.. "$"u8, .. local.Slice("input_image_mask"u8.Length)], value);
                return true;
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
    }
}
