// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Responses
{
    [Experimental("OPENAI001")]
    public readonly partial struct ResponseIncompleteStatusReason : IEquatable<ResponseIncompleteStatusReason>
    {
        private readonly string _value;
        private const string MaxOutputTokensValue = "max_output_tokens";
        private const string ContentFilterValue = "content_filter";

        public ResponseIncompleteStatusReason(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static ResponseIncompleteStatusReason MaxOutputTokens { get; } = new ResponseIncompleteStatusReason(MaxOutputTokensValue);

        public static ResponseIncompleteStatusReason ContentFilter { get; } = new ResponseIncompleteStatusReason(ContentFilterValue);

        public static bool operator ==(ResponseIncompleteStatusReason left, ResponseIncompleteStatusReason right) => left.Equals(right);

        public static bool operator !=(ResponseIncompleteStatusReason left, ResponseIncompleteStatusReason right) => !left.Equals(right);

        public static implicit operator ResponseIncompleteStatusReason(string value) => new ResponseIncompleteStatusReason(value);

        public static implicit operator ResponseIncompleteStatusReason?(string value) => value == null ? null : new ResponseIncompleteStatusReason(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResponseIncompleteStatusReason other && Equals(other);

        public bool Equals(ResponseIncompleteStatusReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
