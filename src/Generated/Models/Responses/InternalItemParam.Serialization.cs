// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    [PersistableModelProxy(typeof(InternalUnknownItemParam))]
    internal abstract partial class InternalItemParam : IJsonModel<InternalItemParam>
    {
        internal InternalItemParam()
        {
        }

        void IJsonModel<InternalItemParam>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalItemParam>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalItemParam)} does not support writing '{format}' format.");
            }
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (!Patch.Contains("$.type"u8))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Kind.ToString());
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        InternalItemParam IJsonModel<InternalItemParam>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        protected virtual InternalItemParam JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalItemParam>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalItemParam)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInternalItemParam(document.RootElement, null, options);
        }

        internal static InternalItemParam DeserializeInternalItemParam(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type"u8, out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "message":
                        return InternalResponsesMessageItemParam.DeserializeInternalResponsesMessageItemParam(element, data, options);
                    case "function_call_output":
                        return InternalFunctionToolCallOutputItemParam.DeserializeInternalFunctionToolCallOutputItemParam(element, data, options);
                    case "file_search_call":
                        return InternalFileSearchToolCallItemParam.DeserializeInternalFileSearchToolCallItemParam(element, data, options);
                    case "computer_call":
                        return InternalComputerUsePreviewToolCallItemParam.DeserializeInternalComputerUsePreviewToolCallItemParam(element, data, options);
                    case "computer_call_output":
                        return InternalComputerUsePreviewToolCallOutputItemParam.DeserializeInternalComputerUsePreviewToolCallOutputItemParam(element, data, options);
                    case "web_search_call":
                        return InternalWebSearchToolCallItemParam.DeserializeInternalWebSearchToolCallItemParam(element, data, options);
                    case "function_call":
                        return InternalFunctionToolCallItemParam.DeserializeInternalFunctionToolCallItemParam(element, data, options);
                    case "reasoning":
                        return InternalReasoningItemParam.DeserializeInternalReasoningItemParam(element, data, options);
                    case "item_reference":
                        return InternalItemReferenceItemParam.DeserializeInternalItemReferenceItemParam(element, data, options);
                    case "image_generation_call":
                        return InternalImageGenToolCallItemParam.DeserializeInternalImageGenToolCallItemParam(element, data, options);
                    case "code_interpreter_call":
                        return InternalCodeInterpreterToolCallItemParam.DeserializeInternalCodeInterpreterToolCallItemParam(element, data, options);
                    case "local_shell_call":
                        return InternalLocalShellToolCallItemParam.DeserializeInternalLocalShellToolCallItemParam(element, data, options);
                    case "local_shell_call_output":
                        return InternalLocalShellToolCallOutputItemParam.DeserializeInternalLocalShellToolCallOutputItemParam(element, data, options);
                    case "mcp_list_tools":
                        return InternalMCPListToolsItemParam.DeserializeInternalMCPListToolsItemParam(element, data, options);
                    case "mcp_approval_request":
                        return InternalMCPApprovalRequestItemParam.DeserializeInternalMCPApprovalRequestItemParam(element, data, options);
                    case "mcp_approval_response":
                        return InternalMCPApprovalResponseItemParam.DeserializeInternalMCPApprovalResponseItemParam(element, data, options);
                    case "mcp_call":
                        return InternalMCPCallItemParam.DeserializeInternalMCPCallItemParam(element, data, options);
                }
            }
            return InternalUnknownItemParam.DeserializeInternalUnknownItemParam(element, data, options);
        }

        BinaryData IPersistableModel<InternalItemParam>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalItemParam>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InternalItemParam)} does not support writing '{options.Format}' format.");
            }
        }

        InternalItemParam IPersistableModel<InternalItemParam>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        protected virtual InternalItemParam PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalItemParam>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeInternalItemParam(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InternalItemParam)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InternalItemParam>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
