// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Responses
{
    internal readonly partial struct InternalCodeInterpreterToolOutputType : IEquatable<InternalCodeInterpreterToolOutputType>
    {
        private readonly string _value;
        private const string LogsValue = "logs";
        private const string ImageValue = "image";

        public InternalCodeInterpreterToolOutputType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalCodeInterpreterToolOutputType Logs { get; } = new InternalCodeInterpreterToolOutputType(LogsValue);

        internal static InternalCodeInterpreterToolOutputType Image { get; } = new InternalCodeInterpreterToolOutputType(ImageValue);

        public static bool operator ==(InternalCodeInterpreterToolOutputType left, InternalCodeInterpreterToolOutputType right) => left.Equals(right);

        public static bool operator !=(InternalCodeInterpreterToolOutputType left, InternalCodeInterpreterToolOutputType right) => !left.Equals(right);

        public static implicit operator InternalCodeInterpreterToolOutputType(string value) => new InternalCodeInterpreterToolOutputType(value);

        public static implicit operator InternalCodeInterpreterToolOutputType?(string value) => value == null ? null : new InternalCodeInterpreterToolOutputType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalCodeInterpreterToolOutputType other && Equals(other);

        public bool Equals(InternalCodeInterpreterToolOutputType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
