// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using OpenAI;

namespace OpenAI.Responses
{
    [Experimental("OPENAI001")]
    public partial class OpenAIResponse
    {
        private protected IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        internal OpenAIResponse(IDictionary<string, string> metadata, float? temperature, float? topP, string endUserId, string id, DateTimeOffset createdAt, ResponseError error, ResponseIncompleteStatusDetails incompleteStatusDetails, IEnumerable<ResponseItem> outputItems, bool parallelToolCallsEnabled)
        {
            // Plugin customization: ensure initialization of collections
            Metadata = metadata ?? new ChangeTrackingDictionary<string, string>();
            Temperature = temperature;
            TopP = topP;
            EndUserId = endUserId;
            Tools = new ChangeTrackingList<ResponseTool>();
            Id = id;
            CreatedAt = createdAt;
            Error = error;
            IncompleteStatusDetails = incompleteStatusDetails;
            OutputItems = outputItems.ToList();
            ParallelToolCallsEnabled = parallelToolCallsEnabled;
        }

        internal OpenAIResponse(IDictionary<string, string> metadata, float? temperature, float? topP, string endUserId, ResponseServiceTier? serviceTier, string previousResponseId, string model, ResponseReasoningOptions reasoningOptions, bool? backgroundModeEnabled, int? maxOutputTokenCount, string instructions, ResponseTextOptions textOptions, IList<ResponseTool> tools, ResponseToolChoice toolChoice, ResponseTruncationMode? truncationMode, string id, string @object, ResponseStatus? status, DateTimeOffset createdAt, ResponseError error, ResponseIncompleteStatusDetails incompleteStatusDetails, IList<ResponseItem> outputItems, ResponseTokenUsage usage, bool parallelToolCallsEnabled, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            // Plugin customization: ensure initialization of collections
            Metadata = metadata ?? new ChangeTrackingDictionary<string, string>();
            Temperature = temperature;
            TopP = topP;
            EndUserId = endUserId;
            ServiceTier = serviceTier;
            PreviousResponseId = previousResponseId;
            Model = model;
            ReasoningOptions = reasoningOptions;
            BackgroundModeEnabled = backgroundModeEnabled;
            MaxOutputTokenCount = maxOutputTokenCount;
            Instructions = instructions;
            TextOptions = textOptions;
            Tools = tools ?? new ChangeTrackingList<ResponseTool>();
            ToolChoice = toolChoice;
            TruncationMode = truncationMode;
            Id = id;
            Object = @object;
            Status = status;
            CreatedAt = createdAt;
            Error = error;
            IncompleteStatusDetails = incompleteStatusDetails;
            OutputItems = outputItems ?? new ChangeTrackingList<ResponseItem>();
            Usage = usage;
            ParallelToolCallsEnabled = parallelToolCallsEnabled;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        public IDictionary<string, string> Metadata { get; }

        public float? Temperature { get; }

        public float? TopP { get; }

        public ResponseServiceTier? ServiceTier { get; }

        public string PreviousResponseId { get; }

        public string Instructions { get; }

        public IList<ResponseTool> Tools { get; }

        public string Id { get; }

        public ResponseStatus? Status { get; }

        public DateTimeOffset CreatedAt { get; }

        public ResponseError Error { get; }

        public ResponseTokenUsage Usage { get; }

        internal IDictionary<string, BinaryData> SerializedAdditionalRawData
        {
            get => _additionalBinaryDataProperties;
            set => _additionalBinaryDataProperties = value;
        }
    }
}
