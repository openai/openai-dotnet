// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    public partial class FileSearchTool : ResponseTool, IJsonModel<FileSearchTool>
    {
        internal FileSearchTool() : this(InternalToolType.FileSearch, default, null, default, null, null)
        {
        }

        void IJsonModel<FileSearchTool>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$"u8))
            {
                writer.WriteRawValue(Patch.GetJson("$"u8));
                return;
            }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FileSearchTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FileSearchTool)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            if (Patch.Contains("$.vector_store_ids"u8))
            {
                if (!Patch.IsRemoved("$.vector_store_ids"u8))
                {
                    writer.WritePropertyName("vector_store_ids"u8);
                    writer.WriteRawValue(Patch.GetJson("$.vector_store_ids"u8));
                }
            }
            else
            {
                writer.WritePropertyName("vector_store_ids"u8);
                writer.WriteStartArray();
                for (int i = 0; i < VectorStoreIds.Count; i++)
                {
                    if (Patch.IsRemoved(Encoding.UTF8.GetBytes($"$.vector_store_ids[{i}]")))
                    {
                        continue;
                    }
                    if (VectorStoreIds[i] == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(VectorStoreIds[i]);
                }
                Patch.WriteTo(writer, "$.vector_store_ids"u8);
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MaxResultCount) && !Patch.Contains("$.max_num_results"u8))
            {
                writer.WritePropertyName("max_num_results"u8);
                writer.WriteNumberValue(MaxResultCount.Value);
            }
            if (Optional.IsDefined(RankingOptions) && !Patch.Contains("$.ranking_options"u8))
            {
                writer.WritePropertyName("ranking_options"u8);
                writer.WriteObjectValue(RankingOptions, options);
            }
            if (Optional.IsDefined(Filters) && !Patch.Contains("$.filters"u8))
            {
                writer.WritePropertyName("filters"u8);
#if NET6_0_OR_GREATER
                writer.WriteRawValue(Filters);
#else
                using (JsonDocument document = JsonDocument.Parse(Filters))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }

            Patch.WriteTo(writer);
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        }

        FileSearchTool IJsonModel<FileSearchTool>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (FileSearchTool)JsonModelCreateCore(ref reader, options);

        protected override ResponseTool JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FileSearchTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FileSearchTool)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFileSearchTool(document.RootElement, null, options);
        }

        internal static FileSearchTool DeserializeFileSearchTool(JsonElement element, BinaryData data, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InternalToolType kind = default;
#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            JsonPatch patch = new JsonPatch(data is null ? ReadOnlyMemory<byte>.Empty : data.ToMemory());
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
            IList<string> vectorStoreIds = default;
            int? maxResultCount = default;
            FileSearchToolRankingOptions rankingOptions = default;
            BinaryData filters = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = new InternalToolType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("vector_store_ids"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    vectorStoreIds = array;
                    continue;
                }
                if (prop.NameEquals("max_num_results"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxResultCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("ranking_options"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rankingOptions = FileSearchToolRankingOptions.DeserializeFileSearchToolRankingOptions(prop.Value, prop.Value.GetUtf8Bytes(), options);
                    continue;
                }
                if (prop.NameEquals("filters"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        filters = null;
                        continue;
                    }
                    filters = BinaryData.FromString(prop.Value.GetRawText());
                    continue;
                }
                patch.Set([.. "$."u8, .. Encoding.UTF8.GetBytes(prop.Name)], prop.Value.GetUtf8Bytes());
            }
            return new FileSearchTool(
                kind,
                patch,
                vectorStoreIds,
                maxResultCount,
                rankingOptions,
                filters);
        }

        BinaryData IPersistableModel<FileSearchTool>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FileSearchTool>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(FileSearchTool)} does not support writing '{options.Format}' format.");
            }
        }

        FileSearchTool IPersistableModel<FileSearchTool>.Create(BinaryData data, ModelReaderWriterOptions options) => (FileSearchTool)PersistableModelCreateCore(data, options);

        protected override ResponseTool PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<FileSearchTool>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeFileSearchTool(document.RootElement, data, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FileSearchTool)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<FileSearchTool>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateGet(ReadOnlySpan<byte> jsonPath, out JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();
            value = default;

            if (local.StartsWith("ranking_options"u8))
            {
                return RankingOptions.Patch.TryGetEncodedValue([.. "$"u8, .. local.Slice("ranking_options"u8.Length)], out value);
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.

#pragma warning disable SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
        private bool PropagateSet(ReadOnlySpan<byte> jsonPath, JsonPatch.EncodedValue value)
        {
            ReadOnlySpan<byte> local = jsonPath.SliceToStartOfPropertyName();

            if (local.StartsWith("ranking_options"u8))
            {
                RankingOptions.Patch.Set([.. "$"u8, .. local.Slice("ranking_options"u8.Length)], value);
                return true;
            }
            return false;
        }
#pragma warning restore SCME0001 // Type is for evaluation purposes only and is subject to change or removal in future updates.
    }
}
