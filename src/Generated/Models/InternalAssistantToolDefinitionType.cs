// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Assistants
{
    internal readonly partial struct InternalAssistantToolDefinitionType : IEquatable<InternalAssistantToolDefinitionType>
    {
        private readonly string _value;
        private const string CodeInterpreterValue = "code_interpreter";
        private const string FileSearchValue = "file_search";
        private const string FunctionValue = "function";

        public InternalAssistantToolDefinitionType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalAssistantToolDefinitionType CodeInterpreter { get; } = new InternalAssistantToolDefinitionType(CodeInterpreterValue);

        internal static InternalAssistantToolDefinitionType FileSearch { get; } = new InternalAssistantToolDefinitionType(FileSearchValue);

        internal static InternalAssistantToolDefinitionType Function { get; } = new InternalAssistantToolDefinitionType(FunctionValue);

        public static bool operator ==(InternalAssistantToolDefinitionType left, InternalAssistantToolDefinitionType right) => left.Equals(right);

        public static bool operator !=(InternalAssistantToolDefinitionType left, InternalAssistantToolDefinitionType right) => !left.Equals(right);

        public static implicit operator InternalAssistantToolDefinitionType(string value) => new InternalAssistantToolDefinitionType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalAssistantToolDefinitionType other && Equals(other);

        public bool Equals(InternalAssistantToolDefinitionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
