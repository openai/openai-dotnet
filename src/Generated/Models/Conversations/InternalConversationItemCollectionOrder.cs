// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Conversations
{
    internal readonly partial struct InternalConversationItemCollectionOrder : IEquatable<InternalConversationItemCollectionOrder>
    {
        private readonly string _value;
        private const string AscendingValue = "asc";
        private const string DescendingValue = "desc";

        public InternalConversationItemCollectionOrder(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalConversationItemCollectionOrder Ascending { get; } = new InternalConversationItemCollectionOrder(AscendingValue);

        internal static InternalConversationItemCollectionOrder Descending { get; } = new InternalConversationItemCollectionOrder(DescendingValue);

        public static bool operator ==(InternalConversationItemCollectionOrder left, InternalConversationItemCollectionOrder right) => left.Equals(right);

        public static bool operator !=(InternalConversationItemCollectionOrder left, InternalConversationItemCollectionOrder right) => !left.Equals(right);

        public static implicit operator InternalConversationItemCollectionOrder(string value) => new InternalConversationItemCollectionOrder(value);

        public static implicit operator InternalConversationItemCollectionOrder?(string value) => value == null ? null : new InternalConversationItemCollectionOrder(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalConversationItemCollectionOrder other && Equals(other);

        public bool Equals(InternalConversationItemCollectionOrder other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
