// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Responses
{
    internal readonly partial struct InternalResponsesContentType : IEquatable<InternalResponsesContentType>
    {
        private readonly string _value;
        private const string InputTextValue = "input_text";
        private const string InputImageValue = "input_image";
        private const string InputFileValue = "input_file";
        private const string OutputTextValue = "output_text";
        private const string RefusalValue = "refusal";

        public InternalResponsesContentType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static InternalResponsesContentType InputText { get; } = new InternalResponsesContentType(InputTextValue);

        public static InternalResponsesContentType InputImage { get; } = new InternalResponsesContentType(InputImageValue);

        public static InternalResponsesContentType InputFile { get; } = new InternalResponsesContentType(InputFileValue);

        public static InternalResponsesContentType OutputText { get; } = new InternalResponsesContentType(OutputTextValue);

        public static InternalResponsesContentType Refusal { get; } = new InternalResponsesContentType(RefusalValue);

        public static bool operator ==(InternalResponsesContentType left, InternalResponsesContentType right) => left.Equals(right);

        public static bool operator !=(InternalResponsesContentType left, InternalResponsesContentType right) => !left.Equals(right);

        public static implicit operator InternalResponsesContentType(string value) => new InternalResponsesContentType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalResponsesContentType other && Equals(other);

        public bool Equals(InternalResponsesContentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
