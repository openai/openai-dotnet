// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Images
{
    internal readonly partial struct InternalCreateImageEditRequestQuality : IEquatable<InternalCreateImageEditRequestQuality>
    {
        private readonly string _value;
        private const string StandardValue = "standard";
        private const string LowValue = "low";
        private const string MediumValue = "medium";
        private const string HighValue = "high";
        private const string AutoValue = "auto";

        public InternalCreateImageEditRequestQuality(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalCreateImageEditRequestQuality Standard { get; } = new InternalCreateImageEditRequestQuality(StandardValue);

        internal static InternalCreateImageEditRequestQuality Low { get; } = new InternalCreateImageEditRequestQuality(LowValue);

        internal static InternalCreateImageEditRequestQuality Medium { get; } = new InternalCreateImageEditRequestQuality(MediumValue);

        internal static InternalCreateImageEditRequestQuality High { get; } = new InternalCreateImageEditRequestQuality(HighValue);

        internal static InternalCreateImageEditRequestQuality Auto { get; } = new InternalCreateImageEditRequestQuality(AutoValue);

        public static bool operator ==(InternalCreateImageEditRequestQuality left, InternalCreateImageEditRequestQuality right) => left.Equals(right);

        public static bool operator !=(InternalCreateImageEditRequestQuality left, InternalCreateImageEditRequestQuality right) => !left.Equals(right);

        public static implicit operator InternalCreateImageEditRequestQuality(string value) => new InternalCreateImageEditRequestQuality(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalCreateImageEditRequestQuality other && Equals(other);

        public bool Equals(InternalCreateImageEditRequestQuality other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
