// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Realtime
{
    internal readonly partial struct InternalRealtimeSessionCreateRequestTurnDetectionType : IEquatable<InternalRealtimeSessionCreateRequestTurnDetectionType>
    {
        private readonly string _value;
        private const string ServerVadValue = "server_vad";
        private const string SemanticVadValue = "semantic_vad";

        public InternalRealtimeSessionCreateRequestTurnDetectionType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalRealtimeSessionCreateRequestTurnDetectionType ServerVad { get; } = new InternalRealtimeSessionCreateRequestTurnDetectionType(ServerVadValue);

        internal static InternalRealtimeSessionCreateRequestTurnDetectionType SemanticVad { get; } = new InternalRealtimeSessionCreateRequestTurnDetectionType(SemanticVadValue);

        public static bool operator ==(InternalRealtimeSessionCreateRequestTurnDetectionType left, InternalRealtimeSessionCreateRequestTurnDetectionType right) => left.Equals(right);

        public static bool operator !=(InternalRealtimeSessionCreateRequestTurnDetectionType left, InternalRealtimeSessionCreateRequestTurnDetectionType right) => !left.Equals(right);

        public static implicit operator InternalRealtimeSessionCreateRequestTurnDetectionType(string value) => new InternalRealtimeSessionCreateRequestTurnDetectionType(value);

        public static implicit operator InternalRealtimeSessionCreateRequestTurnDetectionType?(string value) => value == null ? null : new InternalRealtimeSessionCreateRequestTurnDetectionType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalRealtimeSessionCreateRequestTurnDetectionType other && Equals(other);

        public bool Equals(InternalRealtimeSessionCreateRequestTurnDetectionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
