// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Realtime
{
    internal readonly partial struct InternalRealtimeSessionCreateRequestTurnDetectionEagerness : IEquatable<InternalRealtimeSessionCreateRequestTurnDetectionEagerness>
    {
        private readonly string _value;
        private const string LowValue = "low";
        private const string MediumValue = "medium";
        private const string HighValue = "high";
        private const string AutoValue = "auto";

        public InternalRealtimeSessionCreateRequestTurnDetectionEagerness(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalRealtimeSessionCreateRequestTurnDetectionEagerness Low { get; } = new InternalRealtimeSessionCreateRequestTurnDetectionEagerness(LowValue);

        internal static InternalRealtimeSessionCreateRequestTurnDetectionEagerness Medium { get; } = new InternalRealtimeSessionCreateRequestTurnDetectionEagerness(MediumValue);

        internal static InternalRealtimeSessionCreateRequestTurnDetectionEagerness High { get; } = new InternalRealtimeSessionCreateRequestTurnDetectionEagerness(HighValue);

        internal static InternalRealtimeSessionCreateRequestTurnDetectionEagerness Auto { get; } = new InternalRealtimeSessionCreateRequestTurnDetectionEagerness(AutoValue);

        public static bool operator ==(InternalRealtimeSessionCreateRequestTurnDetectionEagerness left, InternalRealtimeSessionCreateRequestTurnDetectionEagerness right) => left.Equals(right);

        public static bool operator !=(InternalRealtimeSessionCreateRequestTurnDetectionEagerness left, InternalRealtimeSessionCreateRequestTurnDetectionEagerness right) => !left.Equals(right);

        public static implicit operator InternalRealtimeSessionCreateRequestTurnDetectionEagerness(string value) => new InternalRealtimeSessionCreateRequestTurnDetectionEagerness(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalRealtimeSessionCreateRequestTurnDetectionEagerness other && Equals(other);

        public bool Equals(InternalRealtimeSessionCreateRequestTurnDetectionEagerness other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
