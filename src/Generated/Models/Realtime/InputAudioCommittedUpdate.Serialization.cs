// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Realtime
{
    public partial class InputAudioCommittedUpdate : IJsonModel<InputAudioCommittedUpdate>
    {
        internal InputAudioCommittedUpdate() : this(RealtimeUpdateKind.InputAudioCommitted, null, null, null, null)
        {
        }

        void IJsonModel<InputAudioCommittedUpdate>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InputAudioCommittedUpdate>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InputAudioCommittedUpdate)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (_additionalBinaryDataProperties?.ContainsKey("previous_item_id") != true)
            {
                writer.WritePropertyName("previous_item_id"u8);
                writer.WriteStringValue(PreviousItemId);
            }
            if (_additionalBinaryDataProperties?.ContainsKey("item_id") != true)
            {
                writer.WritePropertyName("item_id"u8);
                writer.WriteStringValue(ItemId);
            }
        }

        InputAudioCommittedUpdate IJsonModel<InputAudioCommittedUpdate>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (InputAudioCommittedUpdate)JsonModelCreateCore(ref reader, options);

        protected override RealtimeUpdate JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InputAudioCommittedUpdate>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InputAudioCommittedUpdate)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInputAudioCommittedUpdate(document.RootElement, options);
        }

        internal static InputAudioCommittedUpdate DeserializeInputAudioCommittedUpdate(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            RealtimeUpdateKind kind = default;
            string eventId = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string previousItemId = default;
            string itemId = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = prop.Value.GetString().ToRealtimeUpdateKind();
                    continue;
                }
                if (prop.NameEquals("event_id"u8))
                {
                    eventId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("previous_item_id"u8))
                {
                    previousItemId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("item_id"u8))
                {
                    itemId = prop.Value.GetString();
                    continue;
                }
                // Plugin customization: remove options.Format != "W" check
                additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
            }
            return new InputAudioCommittedUpdate(kind, eventId, additionalBinaryDataProperties, previousItemId, itemId);
        }

        BinaryData IPersistableModel<InputAudioCommittedUpdate>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InputAudioCommittedUpdate>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InputAudioCommittedUpdate)} does not support writing '{options.Format}' format.");
            }
        }

        InputAudioCommittedUpdate IPersistableModel<InputAudioCommittedUpdate>.Create(BinaryData data, ModelReaderWriterOptions options) => (InputAudioCommittedUpdate)PersistableModelCreateCore(data, options);

        protected override RealtimeUpdate PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InputAudioCommittedUpdate>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeInputAudioCommittedUpdate(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InputAudioCommittedUpdate)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InputAudioCommittedUpdate>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
