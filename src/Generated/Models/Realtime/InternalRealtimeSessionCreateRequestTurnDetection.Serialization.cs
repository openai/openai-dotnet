// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Realtime
{
    internal partial class InternalRealtimeSessionCreateRequestTurnDetection : IJsonModel<InternalRealtimeSessionCreateRequestTurnDetection>
    {
        void IJsonModel<InternalRealtimeSessionCreateRequestTurnDetection>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalRealtimeSessionCreateRequestTurnDetection>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalRealtimeSessionCreateRequestTurnDetection)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Kind) && _additionalBinaryDataProperties?.ContainsKey("type") != true)
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Kind.Value.ToString());
            }
            if (Optional.IsDefined(Eagerness) && _additionalBinaryDataProperties?.ContainsKey("eagerness") != true)
            {
                writer.WritePropertyName("eagerness"u8);
                writer.WriteStringValue(Eagerness.Value.ToString());
            }
            if (Optional.IsDefined(Threshold) && _additionalBinaryDataProperties?.ContainsKey("threshold") != true)
            {
                writer.WritePropertyName("threshold"u8);
                writer.WriteNumberValue(Threshold.Value);
            }
            if (Optional.IsDefined(PrefixPaddingMs) && _additionalBinaryDataProperties?.ContainsKey("prefix_padding_ms") != true)
            {
                writer.WritePropertyName("prefix_padding_ms"u8);
                writer.WriteNumberValue(PrefixPaddingMs.Value);
            }
            if (Optional.IsDefined(SilenceDurationMs) && _additionalBinaryDataProperties?.ContainsKey("silence_duration_ms") != true)
            {
                writer.WritePropertyName("silence_duration_ms"u8);
                writer.WriteNumberValue(SilenceDurationMs.Value);
            }
            if (Optional.IsDefined(CreateResponse) && _additionalBinaryDataProperties?.ContainsKey("create_response") != true)
            {
                writer.WritePropertyName("create_response"u8);
                writer.WriteBooleanValue(CreateResponse.Value);
            }
            if (Optional.IsDefined(InterruptResponse) && _additionalBinaryDataProperties?.ContainsKey("interrupt_response") != true)
            {
                writer.WritePropertyName("interrupt_response"u8);
                writer.WriteBooleanValue(InterruptResponse.Value);
            }
            // Plugin customization: remove options.Format != "W" check
            if (_additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    if (ModelSerializationExtensions.IsSentinelValue(item.Value))
                    {
                        continue;
                    }
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        InternalRealtimeSessionCreateRequestTurnDetection IJsonModel<InternalRealtimeSessionCreateRequestTurnDetection>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        protected virtual InternalRealtimeSessionCreateRequestTurnDetection JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalRealtimeSessionCreateRequestTurnDetection>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalRealtimeSessionCreateRequestTurnDetection)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInternalRealtimeSessionCreateRequestTurnDetection(document.RootElement, options);
        }

        internal static InternalRealtimeSessionCreateRequestTurnDetection DeserializeInternalRealtimeSessionCreateRequestTurnDetection(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InternalRealtimeSessionCreateRequestTurnDetectionType? kind = default;
            InternalRealtimeSessionCreateRequestTurnDetectionEagerness? eagerness = default;
            float? threshold = default;
            int? prefixPaddingMs = default;
            int? silenceDurationMs = default;
            bool? createResponse = default;
            bool? interruptResponse = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kind = new InternalRealtimeSessionCreateRequestTurnDetectionType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("eagerness"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    eagerness = new InternalRealtimeSessionCreateRequestTurnDetectionEagerness(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("threshold"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    threshold = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("prefix_padding_ms"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    prefixPaddingMs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("silence_duration_ms"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    silenceDurationMs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("create_response"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createResponse = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("interrupt_response"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    interruptResponse = prop.Value.GetBoolean();
                    continue;
                }
                // Plugin customization: remove options.Format != "W" check
                additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
            }
            return new InternalRealtimeSessionCreateRequestTurnDetection(
                kind,
                eagerness,
                threshold,
                prefixPaddingMs,
                silenceDurationMs,
                createResponse,
                interruptResponse,
                additionalBinaryDataProperties);
        }

        BinaryData IPersistableModel<InternalRealtimeSessionCreateRequestTurnDetection>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalRealtimeSessionCreateRequestTurnDetection>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, OpenAIContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InternalRealtimeSessionCreateRequestTurnDetection)} does not support writing '{options.Format}' format.");
            }
        }

        InternalRealtimeSessionCreateRequestTurnDetection IPersistableModel<InternalRealtimeSessionCreateRequestTurnDetection>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        protected virtual InternalRealtimeSessionCreateRequestTurnDetection PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalRealtimeSessionCreateRequestTurnDetection>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeInternalRealtimeSessionCreateRequestTurnDetection(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InternalRealtimeSessionCreateRequestTurnDetection)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InternalRealtimeSessionCreateRequestTurnDetection>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
