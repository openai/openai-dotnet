// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.Realtime
{
    [Experimental("OPENAI002")]
    public readonly partial struct ConversationVoice : IEquatable<ConversationVoice>
    {
        private readonly string _value;
        private const string AlloyValue = "alloy";
        private const string AshValue = "ash";
        private const string BalladValue = "ballad";
        private const string CoralValue = "coral";
        private const string EchoValue = "echo";
        private const string FableValue = "fable";
        private const string OnyxValue = "onyx";
        private const string NovaValue = "nova";
        private const string SageValue = "sage";
        private const string ShimmerValue = "shimmer";
        private const string VerseValue = "verse";

        public ConversationVoice(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static ConversationVoice Alloy { get; } = new ConversationVoice(AlloyValue);

        public static ConversationVoice Ash { get; } = new ConversationVoice(AshValue);

        public static ConversationVoice Ballad { get; } = new ConversationVoice(BalladValue);

        public static ConversationVoice Coral { get; } = new ConversationVoice(CoralValue);

        public static ConversationVoice Echo { get; } = new ConversationVoice(EchoValue);

        public static ConversationVoice Fable { get; } = new ConversationVoice(FableValue);

        public static ConversationVoice Onyx { get; } = new ConversationVoice(OnyxValue);

        public static ConversationVoice Nova { get; } = new ConversationVoice(NovaValue);

        public static ConversationVoice Sage { get; } = new ConversationVoice(SageValue);

        public static ConversationVoice Shimmer { get; } = new ConversationVoice(ShimmerValue);

        public static ConversationVoice Verse { get; } = new ConversationVoice(VerseValue);

        public static bool operator ==(ConversationVoice left, ConversationVoice right) => left.Equals(right);

        public static bool operator !=(ConversationVoice left, ConversationVoice right) => !left.Equals(right);

        public static implicit operator ConversationVoice(string value) => new ConversationVoice(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConversationVoice other && Equals(other);

        public bool Equals(ConversationVoice other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
