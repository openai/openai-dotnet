// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Realtime
{
    internal readonly partial struct InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType : IEquatable<InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType>
    {
        private readonly string _value;
        private const string NearFieldValue = "near_field";
        private const string FarFieldValue = "far_field";

        public InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType NearField { get; } = new InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType(NearFieldValue);

        internal static InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType FarField { get; } = new InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType(FarFieldValue);

        public static bool operator ==(InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType left, InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType right) => left.Equals(right);

        public static bool operator !=(InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType left, InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType right) => !left.Equals(right);

        public static implicit operator InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType(string value) => new InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType other && Equals(other);

        public bool Equals(InternalRealtimeSessionCreateRequestInputAudioNoiseReductionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
