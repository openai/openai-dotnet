// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Evals
{
    internal readonly partial struct InternalEvalDataSourceConfigType : IEquatable<InternalEvalDataSourceConfigType>
    {
        private readonly string _value;
        private const string CustomValue = "custom";
        private const string LogsValue = "logs";
        private const string StoredCompletionsValue = "stored_completions";

        public InternalEvalDataSourceConfigType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalEvalDataSourceConfigType Custom { get; } = new InternalEvalDataSourceConfigType(CustomValue);

        internal static InternalEvalDataSourceConfigType Logs { get; } = new InternalEvalDataSourceConfigType(LogsValue);

        internal static InternalEvalDataSourceConfigType StoredCompletions { get; } = new InternalEvalDataSourceConfigType(StoredCompletionsValue);

        public static bool operator ==(InternalEvalDataSourceConfigType left, InternalEvalDataSourceConfigType right) => left.Equals(right);

        public static bool operator !=(InternalEvalDataSourceConfigType left, InternalEvalDataSourceConfigType right) => !left.Equals(right);

        public static implicit operator InternalEvalDataSourceConfigType(string value) => new InternalEvalDataSourceConfigType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalEvalDataSourceConfigType other && Equals(other);

        public bool Equals(InternalEvalDataSourceConfigType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
