// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Evals
{
    internal readonly partial struct InternalEvalRunDataContentSourceType : IEquatable<InternalEvalRunDataContentSourceType>
    {
        private readonly string _value;
        private const string FileIdValue = "file_id";
        private const string FileContentValue = "file_content";
        private const string StoredCompletionsValue = "stored_completions";
        private const string ResponsesValue = "responses";

        public InternalEvalRunDataContentSourceType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalEvalRunDataContentSourceType FileId { get; } = new InternalEvalRunDataContentSourceType(FileIdValue);

        internal static InternalEvalRunDataContentSourceType FileContent { get; } = new InternalEvalRunDataContentSourceType(FileContentValue);

        internal static InternalEvalRunDataContentSourceType StoredCompletions { get; } = new InternalEvalRunDataContentSourceType(StoredCompletionsValue);

        internal static InternalEvalRunDataContentSourceType Responses { get; } = new InternalEvalRunDataContentSourceType(ResponsesValue);

        public static bool operator ==(InternalEvalRunDataContentSourceType left, InternalEvalRunDataContentSourceType right) => left.Equals(right);

        public static bool operator !=(InternalEvalRunDataContentSourceType left, InternalEvalRunDataContentSourceType right) => !left.Equals(right);

        public static implicit operator InternalEvalRunDataContentSourceType(string value) => new InternalEvalRunDataContentSourceType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalEvalRunDataContentSourceType other && Equals(other);

        public bool Equals(InternalEvalRunDataContentSourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
