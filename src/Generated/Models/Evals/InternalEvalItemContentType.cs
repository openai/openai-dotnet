// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Evals
{
    internal readonly partial struct InternalEvalItemContentType : IEquatable<InternalEvalItemContentType>
    {
        private readonly string _value;
        private const string InputTextValue = "input_text";
        private const string OutputTextValue = "output_text";

        public InternalEvalItemContentType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalEvalItemContentType InputText { get; } = new InternalEvalItemContentType(InputTextValue);

        internal static InternalEvalItemContentType OutputText { get; } = new InternalEvalItemContentType(OutputTextValue);

        public static bool operator ==(InternalEvalItemContentType left, InternalEvalItemContentType right) => left.Equals(right);

        public static bool operator !=(InternalEvalItemContentType left, InternalEvalItemContentType right) => !left.Equals(right);

        public static implicit operator InternalEvalItemContentType(string value) => new InternalEvalItemContentType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalEvalItemContentType other && Equals(other);

        public bool Equals(InternalEvalItemContentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
