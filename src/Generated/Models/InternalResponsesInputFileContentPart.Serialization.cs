// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using OpenAI;

namespace OpenAI.Responses
{
    internal partial class InternalResponsesInputFileContentPart : IJsonModel<InternalResponsesInputFileContentPart>
    {
        void IJsonModel<InternalResponsesInputFileContentPart>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalResponsesInputFileContentPart>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalResponsesInputFileContentPart)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(FileId) && _additionalBinaryDataProperties?.ContainsKey("file_id") != true)
            {
                writer.WritePropertyName("file_id"u8);
                writer.WriteStringValue(FileId);
            }
            if (Optional.IsDefined(Filename) && _additionalBinaryDataProperties?.ContainsKey("filename") != true)
            {
                writer.WritePropertyName("filename"u8);
                writer.WriteStringValue(Filename);
            }
            if (Optional.IsDefined(FileBytes) && _additionalBinaryDataProperties?.ContainsKey("file_data") != true)
            {
                writer.WritePropertyName("file_data"u8);
#if NET6_0_OR_GREATER
                writer.WriteRawValue(FileBytes);
#else
                using (JsonDocument document = JsonDocument.Parse(FileBytes))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
        }

        InternalResponsesInputFileContentPart IJsonModel<InternalResponsesInputFileContentPart>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (InternalResponsesInputFileContentPart)JsonModelCreateCore(ref reader, options);

        protected override ResponseContentPart JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalResponsesInputFileContentPart>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalResponsesInputFileContentPart)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInternalResponsesInputFileContentPart(document.RootElement, options);
        }

        internal static InternalResponsesInputFileContentPart DeserializeInternalResponsesInputFileContentPart(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResponseContentPartKind kind = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string fileId = default;
            string filename = default;
            BinaryData fileBytes = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("type"u8))
                {
                    kind = prop.Value.GetString().ToResponseContentPartKind();
                    continue;
                }
                if (prop.NameEquals("file_id"u8))
                {
                    fileId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("filename"u8))
                {
                    filename = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("file_data"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fileBytes = BinaryData.FromString(prop.Value.GetRawText());
                    continue;
                }
                additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
            }
            return new InternalResponsesInputFileContentPart(kind, additionalBinaryDataProperties, fileId, filename, fileBytes);
        }

        BinaryData IPersistableModel<InternalResponsesInputFileContentPart>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalResponsesInputFileContentPart>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(InternalResponsesInputFileContentPart)} does not support writing '{options.Format}' format.");
            }
        }

        InternalResponsesInputFileContentPart IPersistableModel<InternalResponsesInputFileContentPart>.Create(BinaryData data, ModelReaderWriterOptions options) => (InternalResponsesInputFileContentPart)PersistableModelCreateCore(data, options);

        protected override ResponseContentPart PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalResponsesInputFileContentPart>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeInternalResponsesInputFileContentPart(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InternalResponsesInputFileContentPart)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InternalResponsesInputFileContentPart>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        public static implicit operator BinaryContent(InternalResponsesInputFileContentPart internalResponsesInputFileContentPart)
        {
            if (internalResponsesInputFileContentPart == null)
            {
                return null;
            }
            return BinaryContent.Create(internalResponsesInputFileContentPart, ModelSerializationExtensions.WireOptions);
        }

        public static explicit operator InternalResponsesInputFileContentPart(ClientResult result)
        {
            using PipelineResponse response = result.GetRawResponse();
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeInternalResponsesInputFileContentPart(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
