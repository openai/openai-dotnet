// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.VectorStores
{
    [Experimental("OPENAI001")]
    public readonly partial struct VectorStoreFileBatchStatus : ValueType, IEquatable<VectorStoreFileBatchStatus>
    {
        private readonly string _value;
        private const string InProgressValue = "in_progress";
        private const string CompletedValue = "completed";
        private const string CancelledValue = "cancelled";
        private const string FailedValue = "failed";

        public VectorStoreFileBatchStatus(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static VectorStoreFileBatchStatus InProgress { get; } = new VectorStoreFileBatchStatus(InProgressValue);

        public static VectorStoreFileBatchStatus Completed { get; } = new VectorStoreFileBatchStatus(CompletedValue);

        public static VectorStoreFileBatchStatus Cancelled { get; } = new VectorStoreFileBatchStatus(CancelledValue);

        public static VectorStoreFileBatchStatus Failed { get; } = new VectorStoreFileBatchStatus(FailedValue);

        public static bool operator ==(VectorStoreFileBatchStatus left, VectorStoreFileBatchStatus right) => left.Equals(right);

        public static bool operator !=(VectorStoreFileBatchStatus left, VectorStoreFileBatchStatus right) => !left.Equals(right);

        public static implicit operator VectorStoreFileBatchStatus(string value) => new VectorStoreFileBatchStatus(value);

        public static implicit operator VectorStoreFileBatchStatus?(string value) => value == null ? null : new VectorStoreFileBatchStatus(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VectorStoreFileBatchStatus other && Equals(other);

        public bool Equals(VectorStoreFileBatchStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
