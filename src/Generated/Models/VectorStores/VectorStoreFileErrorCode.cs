// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using OpenAI;

namespace OpenAI.VectorStores
{
    [Experimental("OPENAI001")]
    public readonly partial struct VectorStoreFileErrorCode : ValueType, IEquatable<VectorStoreFileErrorCode>
    {
        private readonly string _value;
        private const string ServerErrorValue = "server_error";
        private const string UnsupportedFileValue = "unsupported_file";
        private const string InvalidFileValue = "invalid_file";

        public VectorStoreFileErrorCode(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        public static VectorStoreFileErrorCode ServerError { get; } = new VectorStoreFileErrorCode(ServerErrorValue);

        public static VectorStoreFileErrorCode UnsupportedFile { get; } = new VectorStoreFileErrorCode(UnsupportedFileValue);

        public static VectorStoreFileErrorCode InvalidFile { get; } = new VectorStoreFileErrorCode(InvalidFileValue);

        public static bool operator ==(VectorStoreFileErrorCode left, VectorStoreFileErrorCode right) => left.Equals(right);

        public static bool operator !=(VectorStoreFileErrorCode left, VectorStoreFileErrorCode right) => !left.Equals(right);

        public static implicit operator VectorStoreFileErrorCode(string value) => new VectorStoreFileErrorCode(value);

        public static implicit operator VectorStoreFileErrorCode?(string value) => value == null ? null : new VectorStoreFileErrorCode(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VectorStoreFileErrorCode other && Equals(other);

        public bool Equals(VectorStoreFileErrorCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
