// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.VectorStores
{
    internal readonly partial struct InternalVectorStoreSearchRequestRankingOptionsRanker : IEquatable<InternalVectorStoreSearchRequestRankingOptionsRanker>
    {
        private readonly string _value;
        private const string AutoValue = "auto";
        private const string Default20241115Value = "default-2024-11-15";

        public InternalVectorStoreSearchRequestRankingOptionsRanker(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        internal static InternalVectorStoreSearchRequestRankingOptionsRanker Auto { get; } = new InternalVectorStoreSearchRequestRankingOptionsRanker(AutoValue);

        internal static InternalVectorStoreSearchRequestRankingOptionsRanker Default20241115 { get; } = new InternalVectorStoreSearchRequestRankingOptionsRanker(Default20241115Value);

        public static bool operator ==(InternalVectorStoreSearchRequestRankingOptionsRanker left, InternalVectorStoreSearchRequestRankingOptionsRanker right) => left.Equals(right);

        public static bool operator !=(InternalVectorStoreSearchRequestRankingOptionsRanker left, InternalVectorStoreSearchRequestRankingOptionsRanker right) => !left.Equals(right);

        public static implicit operator InternalVectorStoreSearchRequestRankingOptionsRanker(string value) => new InternalVectorStoreSearchRequestRankingOptionsRanker(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalVectorStoreSearchRequestRankingOptionsRanker other && Equals(other);

        public bool Equals(InternalVectorStoreSearchRequestRankingOptionsRanker other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
