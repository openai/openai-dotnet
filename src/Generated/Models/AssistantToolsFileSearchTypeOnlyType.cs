// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Internal.Models
{
    internal readonly partial struct AssistantToolsFileSearchTypeOnlyType : IEquatable<AssistantToolsFileSearchTypeOnlyType>
    {
        private readonly string _value;

        public AssistantToolsFileSearchTypeOnlyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FileSearchValue = "file_search";

        public static AssistantToolsFileSearchTypeOnlyType FileSearch { get; } = new AssistantToolsFileSearchTypeOnlyType(FileSearchValue);
        public static bool operator ==(AssistantToolsFileSearchTypeOnlyType left, AssistantToolsFileSearchTypeOnlyType right) => left.Equals(right);
        public static bool operator !=(AssistantToolsFileSearchTypeOnlyType left, AssistantToolsFileSearchTypeOnlyType right) => !left.Equals(right);
        public static implicit operator AssistantToolsFileSearchTypeOnlyType(string value) => new AssistantToolsFileSearchTypeOnlyType(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssistantToolsFileSearchTypeOnlyType other && Equals(other);
        public bool Equals(AssistantToolsFileSearchTypeOnlyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        public override string ToString() => _value;
    }
}
