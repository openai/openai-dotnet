// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using OpenAI;

namespace OpenAI.Conversations
{
    [Experimental("OPENAI001")]
    public partial class ConversationClient
    {
        private readonly Uri _endpoint;

        protected ConversationClient()
        {
        }

        public ClientPipeline Pipeline { get; }

        public virtual ClientResult GetConversationItems(string conversationId, long? limit = default, string order = default, string after = default, IEnumerable<IncludedConversationItemProperty> include = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateGetConversationItemsRequest(conversationId, limit, order, after, include, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetConversationItemsAsync(string conversationId, long? limit = default, string order = default, string after = default, IEnumerable<IncludedConversationItemProperty> include = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateGetConversationItemsRequest(conversationId, limit, order, after, include, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult CreateConversationItems(string conversationId, BinaryContent content, IEnumerable<IncludedConversationItemProperty> include = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateConversationItemsRequest(conversationId, content, include, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateConversationItemsAsync(string conversationId, BinaryContent content, IEnumerable<IncludedConversationItemProperty> include = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateConversationItemsRequest(conversationId, content, include, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult DeleteConversationItem(string conversationId, string itemId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using PipelineMessage message = CreateDeleteConversationItemRequest(conversationId, itemId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> DeleteConversationItemAsync(string conversationId, string itemId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using PipelineMessage message = CreateDeleteConversationItemRequest(conversationId, itemId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult GetConversationItem(string conversationId, string itemId, IEnumerable<IncludedConversationItemProperty> include = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using PipelineMessage message = CreateGetConversationItemRequest(conversationId, itemId, include, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetConversationItemAsync(string conversationId, string itemId, IEnumerable<IncludedConversationItemProperty> include = default, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using PipelineMessage message = CreateGetConversationItemRequest(conversationId, itemId, include, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult CreateConversation(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateConversationRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> CreateConversationAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateCreateConversationRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult DeleteConversation(string conversationId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateDeleteConversationRequest(conversationId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> DeleteConversationAsync(string conversationId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateDeleteConversationRequest(conversationId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult GetConversation(string conversationId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateGetConversationRequest(conversationId, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> GetConversationAsync(string conversationId, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));

            using PipelineMessage message = CreateGetConversationRequest(conversationId, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        public virtual ClientResult UpdateConversation(string conversationId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpdateConversationRequest(conversationId, content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        public virtual async Task<ClientResult> UpdateConversationAsync(string conversationId, BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNullOrEmpty(conversationId, nameof(conversationId));
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUpdateConversationRequest(conversationId, content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }
    }
}
