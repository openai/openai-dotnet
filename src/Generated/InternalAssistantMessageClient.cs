// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using OpenAI;

namespace OpenAI.Assistants
{
    internal partial class InternalAssistantMessageClient
    {
        private readonly Uri _endpoint;

        protected InternalAssistantMessageClient()
        {
        }

        internal InternalAssistantMessageClient(ClientPipeline pipeline, Uri endpoint)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        public ClientPipeline Pipeline { get; }

        public virtual CollectionResult GetMessages(string threadId, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));

            return new InternalAssistantMessageClientGetMessagesCollectionResult(
                this,
                threadId,
                limit,
                order,
                after,
                before,
                options);
        }

        public virtual AsyncCollectionResult GetMessagesAsync(string threadId, int? limit, string order, string after, string before, RequestOptions options)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));

            return new InternalAssistantMessageClientGetMessagesAsyncCollectionResult(
                this,
                threadId,
                limit,
                order,
                after,
                before,
                options);
        }

        public virtual CollectionResult<ThreadMessage> GetMessages(string threadId, MessageCollectionOptions options = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));

            return new InternalAssistantMessageClientGetMessagesCollectionResultOfT(
                this,
                threadId,
                options?.PageSizeLimit,
                options?.Order?.ToString(),
                options?.AfterId,
                options?.BeforeId,
                cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }

        public virtual AsyncCollectionResult<ThreadMessage> GetMessagesAsync(string threadId, MessageCollectionOptions options = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));

            return new InternalAssistantMessageClientGetMessagesAsyncCollectionResultOfT(
                this,
                threadId,
                options?.PageSizeLimit,
                options?.Order?.ToString(),
                options?.AfterId,
                options?.BeforeId,
                cancellationToken.CanBeCanceled ? new RequestOptions { CancellationToken = cancellationToken } : null);
        }
    }
}
